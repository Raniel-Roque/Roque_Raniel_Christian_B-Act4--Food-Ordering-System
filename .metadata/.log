!SESSION 2023-03-31 10:01:51.798 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data C:\Users\HP\Desktop\Roque-Raniel-BSIT1A-Act4- Food-Ordering-System -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-31 10:02:02.764
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-31 10:02:02.765
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-31 10:02:02.765
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-03-31 10:02:11.828
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-03-31 10:40:55.874 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2023-03-31 10:41:06.010
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2023-03-31 10:41:21.617
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-31 10:41:21.617
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-31 10:41:21.617
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-03-31 10:41:30.129
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-03-31 13:35:02.745 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-31 13:35:09.813
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-31 13:35:09.813
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-31 13:35:09.813
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-03-31 13:35:18.637
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 16:04:27.066 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-12 16:04:45.664
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 16:04:45.664
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 16:04:45.664
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 16:04:52.984
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 10001 2023-04-12 17:54:34.400
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): LoopTask [in [Working copy] FOS_Frame.java [in foodOrderingSystem [in src [in Food_Ordering_System]]]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:617)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.SourceRefElement.getSourceRange(SourceRefElement.java:233)
	at org.eclipse.jdt.internal.core.Member.getJavadocRange(Member.java:301)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContentFromSource(JavadocContentAccess2.java:644)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:520)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2023-04-12 17:54:34.405
!MESSAGE LoopTask [in [Working copy] FOS_Frame.java [in foodOrderingSystem [in src [in Food_Ordering_System]]]] does not exist
!SESSION 2023-04-13 12:07:39.841 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-13 12:07:57.666
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 12:07:57.666
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 12:07:57.666
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-13 12:08:06.441
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-16 21:02:13.648 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-16 21:02:32.230
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-16 21:02:32.230
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-16 21:02:32.230
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-16 21:02:41.706
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-19 13:53:52.655 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-19 13:54:07.283
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-19 13:54:07.283
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-19 13:54:07.283
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-19 13:54:14.980
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-19 17:15:27.966 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2023-04-19 17:15:34.209
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2023-04-19 17:15:46.944
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-19 17:15:46.944
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-19 17:15:46.944
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-19 17:15:56.061
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-19 19:19:29.609 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-19 19:20:02.177
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-19 19:20:02.177
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-19 19:20:02.177
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-19 19:20:14.050
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-20 06:55:35.487 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-20 06:55:55.147
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-20 06:55:55.147
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-20 06:55:55.147
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-20 06:56:02.540
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-20 09:10:54.137 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2023-04-20 09:11:01.210
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2023-04-20 09:11:15.484
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-20 09:11:15.484
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-20 09:11:15.484
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-20 09:11:22.936
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-20 23:12:06.550 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-20 23:12:30.702
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-20 23:12:30.702
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-20 23:12:30.702
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-20 23:12:39.941
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-21 09:03:38.452 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-21 09:04:11.453
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 09:04:11.453
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 09:04:11.453
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 09:04:23.968
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-21 15:41:40.433 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-21 15:41:58.685
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 15:41:58.685
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 15:41:58.685
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 15:42:11.686
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui 4 0 2023-04-21 16:34:37.995
!MESSAGE Unhandled event loop exception
!STACK 0
org.eclipse.swt.SWTException: Widget is disposed
	at org.eclipse.swt.SWT.error(SWT.java:4918)
	at org.eclipse.swt.SWT.error(SWT.java:4833)
	at org.eclipse.swt.SWT.error(SWT.java:4804)
	at org.eclipse.swt.widgets.Widget.error(Widget.java:450)
	at org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:369)
	at org.eclipse.swt.widgets.Control.setFocus(Control.java:3439)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setFocus(AbstractAnnotationHover.java:212)
	at org.eclipse.jface.text.AbstractInformationControlManager.showInformationControl(AbstractInformationControlManager.java:1246)
	at org.eclipse.jface.internal.text.StickyHoverManager.showInformationControl(StickyHoverManager.java:262)
	at org.eclipse.jface.internal.text.InformationControlReplacer.showInformationControl(InformationControlReplacer.java:150)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1134)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractInformationControlManager.setInformation(AbstractInformationControlManager.java:431)
	at org.eclipse.jface.internal.text.InformationControlReplacer.computeInformation(InformationControlReplacer.java:116)
	at org.eclipse.jface.text.AbstractInformationControlManager.doShowInformation(AbstractInformationControlManager.java:1101)
	at org.eclipse.jface.text.AbstractInformationControlManager.showInformation(AbstractInformationControlManager.java:1091)
	at org.eclipse.jface.internal.text.InformationControlReplacer.replaceInformationControl(InformationControlReplacer.java:103)
	at org.eclipse.jface.text.AbstractInformationControlManager.replaceInformationControl(AbstractInformationControlManager.java:1268)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.replaceInformationControl(AbstractHoverInformationControlManager.java:794)
	at org.eclipse.jface.text.TextViewerHoverManager.replaceInformationControl(TextViewerHoverManager.java:297)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager$Closer.lambda$1(AbstractHoverInformationControlManager.java:296)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4043)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-21 19:01:14.390
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package foodOrderingSystem;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;

import javax.swing.*;

public class FOS_Frame extends JFrame implements ActionListener{
	//IMAGES
	ImageIcon Logo = new ImageIcon(new ImageIcon("Images/Logo-FOS.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
	ImageIcon Back = new ImageIcon(new ImageIcon("Images/SideLogos/Back.png").getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
	ImageIcon BFImg = new ImageIcon(new ImageIcon("Images/SideLogos/BF.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MainImg = new ImageIcon(new ImageIcon("Images/SideLogos/Main.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DessertImg = new ImageIcon(new ImageIcon("Images/SideLogos/Dessert.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BuyImg = new ImageIcon(new ImageIcon("Images/SideLogos/Buy.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HelpImg = new ImageIcon(new ImageIcon("Images/SideLogos/help.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//Breakfast
	ImageIcon LSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Longsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/LongsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tapsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TapsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tocilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TocilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Spamsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/SpamsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Daingsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/DaingsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Chicksilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ChicksilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Bangsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/BangsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Cornsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/CornsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Hotsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/HotsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Shanghaisilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ShanghaisilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//BF ARRAY
	ImageIcon[] BFicons = {
			LSilog, TSilog, ToSilog, SSilog, DSilog, CSilog, BSilog, CoSilog, HSilog, ShSilog
		};

	ImageIcon[] selectedBFicons = {
		    LSilogCheck, TSilogCheck, ToSilogCheck, SSilogCheck, DSilogCheck, CSilogCheck,BSilogCheck, CoSilogCheck, HSilogCheck, ShSilogCheck
		};
	
	//MAIN DISHES IMAGES
	ImageIcon Sinigang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sinigang.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SinigangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SinigangCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kare = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Kare.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KareCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/KareCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Sisig = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sisig.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SisigCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SisigCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Adobo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Adobo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon AdoboCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/AdoboCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Chicken = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Chicken.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ChickenCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/ChickenCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Inihaw = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Inihaw.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon InihawCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/InihawCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Crispy = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Pata.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CrispyCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/PataCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Nilagang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Nilaga.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon NilagangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/NilagaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Tinola = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Tinola.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TinolaCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/TinolaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Bulalo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Bulalo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BulaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/BulaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//MAIN ARRAY
	ImageIcon[] Micons = {
			Sinigang, Kare, Sisig, Adobo, Chicken, Inihaw, Crispy, Nilagang, Tinola, Bulalo
		};

	ImageIcon[] selectedMicons = {
			SinigangCheck, KareCheck, SisigCheck, AdoboCheck, ChickenCheck, InihawCheck, CrispyCheck, NilagangCheck, TinolaCheck, BulaloCheck
		};
	
	//DESSERT IMAGES
	ImageIcon Bumbong = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Bumbong.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BumbongCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/BumbongCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mais = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mais.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MaisCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MaisCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Leche = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Leche.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LecheCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/LecheCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Halo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Halo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/HaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Puto = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Puto.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PutoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PutoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Fruit = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Fruit.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon FruitCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/FruitCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mango = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mango.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MangoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MangoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kalamay = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Kalamay.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KalamayCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/KalamayCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Ice = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Ice.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon IceCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/IceCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Pandan = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Pandan.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PandanCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PandanCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//DESSERT ARRAY
	ImageIcon[] Dicons = {
			Bumbong, Mais, Leche, Halo, Puto, Fruit, Mango, Kalamay, Ice, Pandan
		};

	ImageIcon[] selectedDicons = {
			BumbongCheck, MaisCheck, LecheCheck, HaloCheck, PutoCheck, FruitCheck, MangoCheck, KalamayCheck, IceCheck, PandanCheck
		};
	
	//TOOLKITS
	Toolkit ToolK = getToolkit();
	Dimension Size = ToolK.getScreenSize();
	
	//DINE IN OR TAKE OUT FROM OTHER CLASS
	String DT;
	
	//INITIALIZE 
	DefaultListModel<String> ListModel = new DefaultListModel();
	JList<String> List = new JList<String>(ListModel);
	JScrollPane ScrollPane = new JScrollPane(List);
	
	JPanel BFPanel = new JPanel();
	JPanel MainPanel = new JPanel();
	JPanel DPanel = new JPanel();
	JPanel BuyPanel = new JPanel();
	
	JLabel 
			Title = new JLabel(), Order = new JLabel(), 
			DownBar = new JLabel(), SelectedUp = new JLabel(), SelectedDown = new JLabel(), 
			Info = new JLabel(), DiscountTxT = new JLabel(), TotalTxT = new JLabel(), DiscountedTxT = new JLabel(), PaymentTxT = new JLabel(), ChangeTxT = new JLabel(); 
	
	JTextField 
			ItemSelect = new JTextField(), Price = new JTextField(), 
			Total = new JTextField(), Discount = new JTextField(), Payment = new JTextField(), Change = new JTextField();
	
	JButton BackButt, BFButt, MainButt, DessertButt, BuyButt, HelpButt, 
			Confirm = new JButton(), Cancel = new JButton();
	
	JRadioButton None = new JRadioButton(), Student = new JRadioButton(), Senior = new JRadioButton();
	ButtonGroup ButtGroup = new ButtonGroup();
	
	//ARRAYS FOR LOOPS
	JButton[] SideButt = {
				BackButt = new JButton(), BFButt = new JButton(), 
				MainButt = new JButton(), DessertButt = new JButton(), 
				BuyButt = new JButton(), HelpButt = new JButton()
			};
	
	JCheckBox[] BFDish = new JCheckBox[10];
	JCheckBox[] MDish = new JCheckBox[10];
	JCheckBox[] DDish = new JCheckBox[10];
	
	//ARRAYS FOR LOOPS BUT FOR SET TEXTS
	String[] BF = {
				"<html>Longsilog <br>P80.00</html>", "<html>Tapsilog <br>P90.00</html>", "<html>Tocilog <br>P70.00</html>", 
				"<html>Spamsilog <br>P80.00</html>", "<html>Daingsilog <br>P90.00</html>", "<html>Chicksilog <br>P90.00</html>", 
				"<html>Bangsilog <br>P90.00</html>", "<html>Cornsilog <br>P80.00</html>", "<html>Hotsilog <br>P70.00</html>", 
				"<html>Shanghaisilog <br>P70.00</html>"
			};
	
	String[] M = {
				"<html>Sinigang na Bangus<br>P170.00</html>", "<html>Kare-Kare<br>P200.00</html>", "<html>Sisig<br>P170.00</html>", "<html>Pork Adobo<br>P200.00</html>", 
				"<html>Chicken Inasal<br>P120.00</html>", "<html>Inihaw na Liempo<br>P100.00</html>", "<html>Crispy Pata<br>P250.00</html>", 
				"<html>Beef Nilaga<br>P150.00</html>", "<html>Tinola<br>P150.00</html>", "<html>Bulalo<br>P200.00</html>"
			};
	
	String[] D = {
				"<html>Puto Bumbong<br>P50.00</html>", "<html>Mais Con Yelo<br>P100.00</html>", "<html>Leche Flan<br>P90.00</html>", 
				"<html>Halo-Halo<br>P70.00</html>", "<html>Puto<br>P60.00</html>", "<html>Fruit Salad<br>P50.00</html>", 
				"<html>Mango Graham Cake<br>P100.00</html>", "<html>Kalamay<br>P100.00</html>", 
				"<html>Ice Cream<br>P90.00</html>", "<html>Buko Pandan<br>P90.00</html>"
			};
	
	String[] BFShow = {
			"Longsilog","Tapsilog","Tocilog",
			"Spamsilog","Daingsilog","Chicksilog",
			"Bangsilog","Cornsilog","Hotsilog",
			"Shanghaisilog"
	};
	
	Double[] BFCalc = {
			80.00, 90.00, 70.00, 
			80.00, 90.00, 90.00,
			90.00, 80.00, 70.00,
			70.00
	};
	
	String[] MShow = {
			"Sinigang na Bangus","Kare-Kare", "Sisig", "Pork Adobo", 
			"Chicken Inasal", "Inihaw na Liempo", "Crispy Pata", 
			"Beef Nilaga", "Tinola", "Bulalo"
		};
	
	Double[] MCalc = {
			170.00, 200.00, 170.00, 200.00, 
			120.00, 100.00, 250.00,
			150.00, 150.00, 200.00
	};
	
	String[] DShow = {
			"Puto Bumbong", "Mais Con Yelo", "Leche Flan", 
			"Halo-Halo", "Puto", "Fruit Salad", 
			"Mango Graham Cake", "Kalamay", 
			"Ice Cream", "Buko Pandan"
		};
	
	Double[] DCalc = {
			50.00, 100.00, 90.00, 
			70.00, 60.00, 500.00, 
			100.00, 100.00, 
			90.00, 90.00
	};
	
	//PROCESS
	double TotalPrice = 0.00, BFnum = 0.00, Mnum = 0.00, Dnum = 0.00, DiscountPrice = 0.00;
	
	void FOS_Frame_Design(){
		JLabel BG = new JLabel(new ImageIcon(new ImageIcon("Images/Templates/Template_2.png").getImage().getScaledInstance(500, 600, Image.SCALE_SMOOTH)));
		setSize(BG.getPreferredSize());
		getContentPane().add(BG);
		BG.setBounds(0, 0, getWidth(), getHeight());
		
		setLocation(Size.width/2 - getWidth()/2, Size.height/2 - getHeight()/2);
		getContentPane().setBackground(Color.decode("#F5F5DC"));
		setResizable(false);
		setTitle("Food Ordering System");
		setIconImage(Logo.getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//COMPONENTS
		Title.setText("Breakfast");
		Title.setBounds(175, 85, 250, 40);
		Title.setFont(new Font("Georgia", Font.BOLD, 40));
		Title.setForeground(Color.black);
		Title.setBorder(null);
		Title.setFocusable(false);
		Title.setOpaque(false);
		
		//TOOLTIP EDITS
		UIManager.put("ToolTip.background", Color.white);
		UIManager.put("ToolTip.foreground", Color.black);
		UIManager.put("ToolTip.border", BorderFactory.createLineBorder(Color.black, 1));
		UIManager.put("ToolTip.font", new Font("Arial", Font.BOLD, 20));
	    int initialDelay = ToolTipManager.sharedInstance().getInitialDelay();
	    ToolTipManager.sharedInstance().setInitialDelay(10);
	    
	    //SIDE BUTTONS
	    int y = 75;
	    for (int i = 0; i < SideButt.length; i++) {
	        int index = i; // Final Variable for mouselistener
	        SideButt[index].setBounds(0, y, 69, 70);
	        y += 70;
	        SideButt[index].setBorder(null);
	        SideButt[index].setOpaque(true);
	        SideButt[index].setFocusable(false);
	        SideButt[index].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	        SideButt[index].addActionListener(this);
	        
	        if (index == 0) {
		        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        } else if (index >= 1 && index <= SideButt.length-1){
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
	    			public void mouseEntered(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#4b3a2f"))) {
	    		    		SideButt[index].setBackground(Color.decode("#695141"));
	    		    	}
	    		    }
	    		    public void mouseExited(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#695141"))) {
	    		    		SideButt[index].setBackground(Color.decode("#4b3a2f"));
	    		    	}
	    		    }
	    		});
	        } else {
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        }
	        add(SideButt[index]);
	    }
	    
		BackButt.setIcon(Back);
		BackButt.setBackground(Color.decode("#4b3a2f"));
		BackButt.setToolTipText("Back");
		
		BFButt.setIcon(BFImg);
		BFButt.setBackground(Color.decode("#695142"));
		BFButt.setToolTipText("Breakfast");
		
		MainButt.setIcon(MainImg);	
		MainButt.setBackground(Color.decode("#4b3a2f"));
		MainButt.setToolTipText("Main Courses");
		
		DessertButt.setIcon(DessertImg);
		DessertButt.setBackground(Color.decode("#4b3a2f"));
		DessertButt.setToolTipText("Desserts");

		BuyButt.setIcon(BuyImg);
		BuyButt.setBackground(Color.decode("#4b3a2f"));
		BuyButt.setToolTipText("Checkout");
		
		HelpButt.setIcon(HelpImg);
		HelpButt.setBackground(Color.decode("#4b3a2f"));
		HelpButt.setToolTipText("Help");
		
		BFPanel.setBounds(85, 150, 380, 400);
		BFPanel.setLayout(new GridLayout(5,5));
		
		MainPanel.setBounds(85, 150, 380, 400);
		MainPanel.setLayout(new GridLayout(5,5));
		MainPanel.setVisible(false);

		DPanel.setBounds(85, 150, 380, 400);
		DPanel.setLayout(new GridLayout(5,5));
		DPanel.setVisible(false);
		
		BuyPanel.setBounds(85, 180, 140, 300);
		BuyPanel.setVisible(false);
		BuyPanel.setLayout(new BorderLayout());
		
		ScrollPane.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		BuyPanel.add(ScrollPane);
		
		List.setFont(new Font("Arial", Font.BOLD, 12));
		List.setBackground(Color.white);
		List.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    int index = List.locationToIndex(e.getPoint());
                    String selectedValue = List.getModel().getElementAt(index);
                    ItemSelect.setText(selectedValue);
                    ItemSelect.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    Price.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    
                    
                    //ARRAY CHECKER AND INDEX GETTER
                    int BFIndex = -1, MIndex = -1, DIndex = -1;

                    for (int i = 0; i < BFShow.length; i++) {
                      if (BFShow[i].equals(selectedValue)) {
                    	  BFIndex = i;
                        break;
                      } else if (MShow[i].equals(selectedValue)) {
                    	  MIndex = i;
                          break;
                        } else if (DShow[i].equals(selectedValue)) {
                    	  DIndex = i;
                          break;
                        }
                    }
                    
                    //PRICE SETTER
                    if (BFIndex != -1) {
                    	  Price.setText("P" + String.format("%.2f", BFCalc[BFIndex]));
                    	}  else if (MIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", MCalc[MIndex]));
                      	} else if (DIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", DCalc[DIndex]));
                      	} 
                }
            }
        });
		
		for (int i = 0; i < BFDish.length; i++) {
			BFDish[i] = new JCheckBox(BF[i]);
			BFDish[i].setBackground(Color.decode("#e8ccb4"));
			BFDish[i].setFocusable(false);
			BFDish[i].setOpaque(true);
			BFDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			BFDish[i].addActionListener(this);
			BFDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			BFPanel.add(BFDish[i]);
			
			MDish[i] = new JCheckBox(M[i]);
			MDish[i].setBackground(Color.decode("#e8ccb4"));
			MDish[i].setFocusable(false);
			MDish[i].setOpaque(true);
			MDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			MDish[i].addActionListener(this);
			MDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			MainPanel.add(MDish[i]);
			
			DDish[i] = new JCheckBox(D[i]);
			DDish[i].setBackground(Color.decode("#e8ccb4"));
			DDish[i].setFocusable(false);
			DDish[i].setOpaque(true);
			DDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			DDish[i].addActionListener(this);
			DDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			DPanel.add(DDish[i]);
		}
		
		//BUY PANEL DESIGN
		for (int i = 0; i < BFicons.length; i++) {
		    BFDish[i].setIcon(BFicons[i]);
		    BFDish[i].setSelectedIcon(selectedBFicons[i]);
		    
		    MDish[i].setIcon(Micons[i]);
		    MDish[i].setSelectedIcon(selectedMicons[i]);
		    
		    DDish[i].setIcon(Dicons[i]);
		    DDish[i].setSelectedIcon(selectedDicons[i]);
		}
		
		//TEXT
		Order.setText("Order Details");
		Order.setBounds(92, 143, 250, 40);
		Order.setFont(new Font("Georgia", Font.BOLD, 18));
		Order.setForeground(Color.black);
		Order.setBorder(null);
		Order.setFocusable(false);
		Order.setOpaque(false);
		Order.setVisible(false);
		
		Info.setText("Billing details");
		Info.setBounds(280, 143, 250, 40);
		Info.setFont(new Font("Georgia", Font.BOLD, 18));
		Info.setForeground(Color.black);
		Info.setBorder(null);
		Info.setOpaque(false);
		Info.setVisible(false);
		
		//RIGHT SIDE
		SelectedUp.setBounds(235, 180, 230, 90);
		SelectedUp.setBackground(Color.white);
		SelectedUp.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedUp.setOpaque(true);
		SelectedUp.setVisible(false);
		
		ItemSelect.setText("Select an Item from your list");
		ItemSelect.setFont(new Font("Arial", Font.ITALIC, 14));
		ItemSelect.setForeground(Color.black);
		ItemSelect.setBounds(10, 10, 210, 30);
		ItemSelect.setBackground(Color.white);
		ItemSelect.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		ItemSelect.setOpaque(true);
		ItemSelect.setEditable(false);
		
		Price.setText("Item Price");
		Price.setBounds(10, 50, 210, 30);
		Price.setFont(new Font("Arial", Font.ITALIC, 14));
		Price.setForeground(Color.black);
		Price.setBackground(Color.white);
		Price.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Price.setOpaque(true);
		Price.setEditable(false);
		
		SelectedDown.setBounds(235, 280, 230, 200);
		SelectedDown.setBackground(Color.white);
		SelectedDown.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedDown.setOpaque(true);
		SelectedDown.setVisible(false);
		
		DiscountTxT.setText("Discounts");
		DiscountTxT.setBounds(5, 5, 250, 15);
		DiscountTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountTxT.setForeground(Color.black);
		DiscountTxT.setBorder(null);
		DiscountTxT.setOpaque(false);
		
		None.setText("None");
		None.setSelected(true);
		None.setBounds(10, 25, 70, 15);
		None.setFocusable(false);
		None.setOpaque(false);
		None.setFont(new Font("Arial", Font.PLAIN, 12));
		None.addActionListener(this);
		
		Student.setText("Student (3%)");
		Student.setSelected(true);
		Student.setBounds(70, 25, 100, 15);
		Student.setFocusable(false);
		Student.setOpaque(false);
		Student.setFont(new Font("Arial", Font.PLAIN, 12));
		Student.addActionListener(this);
		
		Senior.setText("Senior (20%)");
		Senior.setSelected(true);
		Senior.setBounds(10, 45, 100, 15);
		Senior.setFocusable(false);
		Senior.setOpaque(false);
		Senior.setFont(new Font("Arial", Font.PLAIN, 12));
		Senior.addActionListener(this);
		
		ButtGroup.add(None);
		ButtGroup.add(Student);
		ButtGroup.add(Senior);
		
		TotalTxT.setText("Total: ");
		TotalTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		TotalTxT.setBounds(5, 70, 90, 20);
		TotalTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		TotalTxT.setForeground(Color.black);
		TotalTxT.setBorder(null);
		TotalTxT.setOpaque(false);
		
		Total.setHorizontalAlignment(SwingConstants.RIGHT);
		Total.setFont(new Font("Arial", Font.PLAIN, 14));
		Total.setForeground(Color.black);
		Total.setBounds(100, 73, 120, 20);
		Total.setBackground(Color.white);
		Total.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Total.setOpaque(true);
		Total.setEditable(false);
		
		DiscountedTxT.setText("Discounted: ");
		DiscountedTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		DiscountedTxT.setBounds(5, 100, 90, 20);
		DiscountedTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountedTxT.setForeground(Color.black);
		DiscountedTxT.setBorder(null);
		DiscountedTxT.setOpaque(false);
		
		Discount.setText("P 0.00");
		Discount.setHorizontalAlignment(SwingConstants.RIGHT);
		Discount.setFont(new Font("Arial", Font.PLAIN, 14));
		Discount.setForeground(Color.black);
		Discount.setBounds(100, 103, 120, 20);
		Discount.setBackground(Color.white);
		Discount.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Discount.setOpaque(true);
		Discount.setEditable(false);
		
		PaymentTxT.setText("Payment: ");
		PaymentTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		PaymentTxT.setBounds(5, 130, 90, 20);
		PaymentTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		PaymentTxT.setForeground(Color.black);
		PaymentTxT.setBorder(null);
		PaymentTxT.setOpaque(false);
		
		Payment.setText("Enter amount");
		Payment.setHorizontalAlignment(SwingConstants.RIGHT);
		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		Payment.setForeground(Color.decode("#474747"));
		Payment.setBounds(100, 133, 120, 20);
		Payment.setBackground(Color.white);
		Payment.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Payment.setOpaque(true);
		Payment.setEditable(false);
		Payment.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().isEmpty()) {
		    		Payment.setText("Enter amount");
		    		Payment.setForeground(Color.decode("#474747"));
		    		Payment.setEditable(false);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		    public void mouseReleased(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().equals("Enter amount")) {
		    		Payment.setText("");
		    		Payment.setForeground(Color.BLACK);
		    		Payment.setEditable(true);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		});
		
		Payment.addKeyListener(new java.awt.event.KeyAdapter() {
		    public void keyPressed(java.awt.event.KeyEvent e) {
		    if (e.getKeyCode() == KeyEvent.VK_ENTER ) {
		    	
		     } 
		   }
		});
		
		ChangeTxT.setText("Change: ");
		ChangeTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		ChangeTxT.setBounds(5, 160, 90, 20);
		ChangeTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		ChangeTxT.setForeground(Color.black);
		ChangeTxT.setBorder(null);
		ChangeTxT.setOpaque(false);
		
		Change.setHorizontalAlignment(SwingConstants.RIGHT);
		Change.setFont(new Font("Arial", Font.PLAIN, 14));
		Change.setForeground(Color.black);
		Change.setBounds(100, 163, 120, 20);
		Change.setBackground(Color.white);
		Change.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Change.setOpaque(true);
		Change.setEditable(false);
		
		//CONFIRM
		DownBar.setBounds(0, 495, 500, 100);
		DownBar.setBackground(Color.decode("#4b3a2f"));
		DownBar.setBorder(null);
		DownBar.setOpaque(true);
		DownBar.setVisible(false);
		
		Cancel.setText("Cancel");
		Cancel.setBounds(85, 15, 140, 35);
		Cancel.setFont(new Font("Helvetica", Font.BOLD, 16));
		Cancel.setForeground(Color.black);
		Cancel.setBackground(Color.decode("#f5b8b8"));
		Cancel.setOpaque(true);
		Cancel.setBorder(null);
		Cancel.setFocusable(false);
		Cancel.addActionListener(this);
		Cancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f72525"));
		    	Cancel.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f5b8b8"));
		    	Cancel.setForeground(Color.black);
		    }
		});
		
		Confirm.setText("Confirm");
		Confirm.setBounds(280, 15, 140, 35);
		Confirm.setFont(new Font("Helvetica", Font.BOLD, 16));
		Confirm.setForeground(Color.black);
		Confirm.setBackground(Color.decode("#bbf5b8"));
		Confirm.setOpaque(true);
		Confirm.setBorder(null);
		Confirm.setFocusable(false);
		Confirm.addActionListener(this);
		Confirm.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Confirm.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#02bf34"));
		    	Confirm.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#bbf5b8"));
		    	Confirm.setForeground(Color.black);
		    }
		});
		
		//ADD
		add(Title);
		add(Order);
		add(Info);
		add(SelectedUp);
		SelectedUp.add(ItemSelect);
		SelectedUp.add(Price);
		
		add(SelectedDown);
		SelectedDown.add(TotalTxT);
		SelectedDown.add(DiscountTxT);
		SelectedDown.add(DiscountedTxT);
		SelectedDown.add(PaymentTxT);
		SelectedDown.add(ChangeTxT);
		SelectedDown.add(Total);
		SelectedDown.add(Discount);
		SelectedDown.add(Payment);
		SelectedDown.add(Change);
		SelectedDown.add(None);
		SelectedDown.add(Senior);
		SelectedDown.add(Student);
		
		add(DownBar);
		DownBar.add(Confirm);
		DownBar.add(Cancel);
		
		add(BFPanel);
		add(MainPanel);
		add(DPanel);
		add(BuyPanel);
		
		getContentPane().setComponentZOrder(Title, 0);
		getContentPane().setComponentZOrder(BFPanel, 0);
		getContentPane().setComponentZOrder(MainPanel, 0);
		getContentPane().setComponentZOrder(DPanel, 0);
		getContentPane().setComponentZOrder(BuyPanel, 0);
		getContentPane().setComponentZOrder(Order, 0);
		getContentPane().setComponentZOrder(Info, 0);
		getContentPane().setComponentZOrder(SelectedDown, 0);
		getContentPane().setComponentZOrder(SelectedUp, 0);
		getContentPane().setComponentZOrder(DownBar, 0);
		for (int i = 0; i < SideButt.length; i++) {
		    getContentPane().setComponentZOrder(SideButt[i], 0);
		}
		setLayout(null);
		setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		for(int i = 0; i < BFDish.length;i++ ) {
    		if(e.getSource().equals(BFDish[i])) {
    			if(BFDish[i].isSelected()) {
        			ListModel.addElement(BFShow[i]);
    			} else {
    				ListModel.removeElement(BFShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < MDish.length;i++ ) {
    		if(e.getSource().equals(MDish[i])) {
    			if(MDish[i].isSelected()) {
        			ListModel.addElement(MShow[i]);
    			} else {
    				ListModel.removeElement(MShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < DDish.length;i++ ) {
    		if(e.getSource().equals(DDish[i])) {
    			if(DDish[i].isSelected()) {
        			ListModel.addElement(DShow[i]);
    			} else {
    				ListModel.removeElement(DShow[i]);
    			}
    		}
		}
		
		if (e.getSource() == BackButt) {
		    int Back = JOptionPane.showConfirmDialog(this, "Go back and discard order?", "Back", JOptionPane.YES_NO_OPTION);
		    if (Back == JOptionPane.YES_OPTION) {
		        FOS_Dine_Take Fos = new FOS_Dine_Take();
		        Fos.FOS_Dine_Take_Design();
		        dispose();
		    }
		}
		
		//PROCESS
		
	    if (e.getSource() == BFButt) {
	   
	        Title.setText("Breakfast");
	        BFButt.setBackground(Color.decode("#695142"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(true);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == MainButt) {
	    	
	        Title.setText("Main Course");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#695142"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(140, 85, 280, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(true);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedDown.setVisible(false);
	        SelectedUp.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == DessertButt) {
	    	
	        Title.setText("Desserts");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#695142"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(true);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == BuyButt) {
	    	
	        Title.setText("Checkout");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#695142"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(true);
	        Order.setVisible(true);
	        Info.setVisible(true);
	        SelectedUp.setVisible(true);
	        SelectedDown.setVisible(true);
	        DownBar.setVisible(true);
	        
	        //PROCESS
	        
	      //------------------------------------------------------------------
	        
	        int size = ListModel.getSize();
	        
	        if (size == 0) {
	        	Total.setText("P 0.00");
	        } else {
	        	for (int i = 0; i < size; i++) {
	  			  String element = ListModel.getElementAt(i);
	  			  
	  					//ARRAY CHECKER AND INDEX GETTER
	  		             int BFIndex = -1, MIndex = -1, DIndex = -1;
	  		
	  		             for (int x = 0; x < BFShow.length; x++) {
	  		               if (BFShow[x].equals(element)) {
	  		             	  BFIndex = x;
	  		                 break;
	  		               } else if (MShow[x].equals(element)) {
	  		             	  MIndex = x;
	  		                   break;
	  		                 } else if (DShow[x].equals(element)) {
	  		             	  DIndex = x;
	  		                   break;
	  		                 }
	  		             }
	               
	  		           //PRICE SETTER
	  		             if (BFIndex != -1) {
	  		            	 	BFnum += BFCalc[BFIndex];
	  		             	}  else if (MIndex != -1) {
	  		             		Mnum += MCalc[MIndex];
	  		               	} else if (DIndex != -1) {
	  		               		Dnum += DCalc[DIndex];
	  		               	} 
	  		             
	  		             TotalPrice = BFnum + Mnum + Dnum;
	  		             Total.setText("P " + String.format("%.2f", TotalPrice));
	  			}
	        }
	      //------------------------------------------------------------------
	    } else if (e.getSource() == HelpButt) {
	    	JOptionPane.showMessageDialog(null, "<html>To select the item(s) you want to order, simply <u>tap or click</u> on the area near the food you have chosen.<br> Once selected, a check mark will appear next to the item to indicate that it has been chosen.</html>", "How to use!", JOptionPane.INFORMATION_MESSAGE);	    	
	    }
	    
	  //------------------------------------------------------------------
	    if (e.getSource() == None || e.getSource() == Student || e.getSource() == Senior) {
			if(None.isSelected() == true) {
				Discount.setText("P 0.00");
			} else if(Student.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.03;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			} else if(Senior.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.2;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			}
		}
	  //------------------------------------------------------------------
	    
	    (TotalPrice - DiscountPrice)
	    Change.setText("99");
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-21 19:01:14.397
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package foodOrderingSystem;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;

import javax.swing.*;

public class FOS_Frame extends JFrame implements ActionListener{
	//IMAGES
	ImageIcon Logo = new ImageIcon(new ImageIcon("Images/Logo-FOS.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
	ImageIcon Back = new ImageIcon(new ImageIcon("Images/SideLogos/Back.png").getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
	ImageIcon BFImg = new ImageIcon(new ImageIcon("Images/SideLogos/BF.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MainImg = new ImageIcon(new ImageIcon("Images/SideLogos/Main.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DessertImg = new ImageIcon(new ImageIcon("Images/SideLogos/Dessert.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BuyImg = new ImageIcon(new ImageIcon("Images/SideLogos/Buy.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HelpImg = new ImageIcon(new ImageIcon("Images/SideLogos/help.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//Breakfast
	ImageIcon LSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Longsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/LongsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tapsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TapsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tocilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TocilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Spamsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/SpamsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Daingsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/DaingsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Chicksilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ChicksilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Bangsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/BangsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Cornsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/CornsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Hotsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/HotsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Shanghaisilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ShanghaisilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//BF ARRAY
	ImageIcon[] BFicons = {
			LSilog, TSilog, ToSilog, SSilog, DSilog, CSilog, BSilog, CoSilog, HSilog, ShSilog
		};

	ImageIcon[] selectedBFicons = {
		    LSilogCheck, TSilogCheck, ToSilogCheck, SSilogCheck, DSilogCheck, CSilogCheck,BSilogCheck, CoSilogCheck, HSilogCheck, ShSilogCheck
		};
	
	//MAIN DISHES IMAGES
	ImageIcon Sinigang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sinigang.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SinigangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SinigangCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kare = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Kare.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KareCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/KareCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Sisig = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sisig.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SisigCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SisigCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Adobo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Adobo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon AdoboCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/AdoboCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Chicken = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Chicken.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ChickenCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/ChickenCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Inihaw = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Inihaw.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon InihawCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/InihawCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Crispy = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Pata.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CrispyCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/PataCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Nilagang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Nilaga.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon NilagangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/NilagaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Tinola = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Tinola.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TinolaCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/TinolaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Bulalo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Bulalo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BulaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/BulaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//MAIN ARRAY
	ImageIcon[] Micons = {
			Sinigang, Kare, Sisig, Adobo, Chicken, Inihaw, Crispy, Nilagang, Tinola, Bulalo
		};

	ImageIcon[] selectedMicons = {
			SinigangCheck, KareCheck, SisigCheck, AdoboCheck, ChickenCheck, InihawCheck, CrispyCheck, NilagangCheck, TinolaCheck, BulaloCheck
		};
	
	//DESSERT IMAGES
	ImageIcon Bumbong = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Bumbong.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BumbongCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/BumbongCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mais = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mais.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MaisCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MaisCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Leche = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Leche.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LecheCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/LecheCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Halo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Halo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/HaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Puto = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Puto.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PutoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PutoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Fruit = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Fruit.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon FruitCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/FruitCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mango = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mango.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MangoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MangoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kalamay = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Kalamay.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KalamayCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/KalamayCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Ice = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Ice.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon IceCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/IceCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Pandan = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Pandan.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PandanCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PandanCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//DESSERT ARRAY
	ImageIcon[] Dicons = {
			Bumbong, Mais, Leche, Halo, Puto, Fruit, Mango, Kalamay, Ice, Pandan
		};

	ImageIcon[] selectedDicons = {
			BumbongCheck, MaisCheck, LecheCheck, HaloCheck, PutoCheck, FruitCheck, MangoCheck, KalamayCheck, IceCheck, PandanCheck
		};
	
	//TOOLKITS
	Toolkit ToolK = getToolkit();
	Dimension Size = ToolK.getScreenSize();
	
	//DINE IN OR TAKE OUT FROM OTHER CLASS
	String DT;
	
	//INITIALIZE 
	DefaultListModel<String> ListModel = new DefaultListModel();
	JList<String> List = new JList<String>(ListModel);
	JScrollPane ScrollPane = new JScrollPane(List);
	
	JPanel BFPanel = new JPanel();
	JPanel MainPanel = new JPanel();
	JPanel DPanel = new JPanel();
	JPanel BuyPanel = new JPanel();
	
	JLabel 
			Title = new JLabel(), Order = new JLabel(), 
			DownBar = new JLabel(), SelectedUp = new JLabel(), SelectedDown = new JLabel(), 
			Info = new JLabel(), DiscountTxT = new JLabel(), TotalTxT = new JLabel(), DiscountedTxT = new JLabel(), PaymentTxT = new JLabel(), ChangeTxT = new JLabel(); 
	
	JTextField 
			ItemSelect = new JTextField(), Price = new JTextField(), 
			Total = new JTextField(), Discount = new JTextField(), Payment = new JTextField(), Change = new JTextField();
	
	JButton BackButt, BFButt, MainButt, DessertButt, BuyButt, HelpButt, 
			Confirm = new JButton(), Cancel = new JButton();
	
	JRadioButton None = new JRadioButton(), Student = new JRadioButton(), Senior = new JRadioButton();
	ButtonGroup ButtGroup = new ButtonGroup();
	
	//ARRAYS FOR LOOPS
	JButton[] SideButt = {
				BackButt = new JButton(), BFButt = new JButton(), 
				MainButt = new JButton(), DessertButt = new JButton(), 
				BuyButt = new JButton(), HelpButt = new JButton()
			};
	
	JCheckBox[] BFDish = new JCheckBox[10];
	JCheckBox[] MDish = new JCheckBox[10];
	JCheckBox[] DDish = new JCheckBox[10];
	
	//ARRAYS FOR LOOPS BUT FOR SET TEXTS
	String[] BF = {
				"<html>Longsilog <br>P80.00</html>", "<html>Tapsilog <br>P90.00</html>", "<html>Tocilog <br>P70.00</html>", 
				"<html>Spamsilog <br>P80.00</html>", "<html>Daingsilog <br>P90.00</html>", "<html>Chicksilog <br>P90.00</html>", 
				"<html>Bangsilog <br>P90.00</html>", "<html>Cornsilog <br>P80.00</html>", "<html>Hotsilog <br>P70.00</html>", 
				"<html>Shanghaisilog <br>P70.00</html>"
			};
	
	String[] M = {
				"<html>Sinigang na Bangus<br>P170.00</html>", "<html>Kare-Kare<br>P200.00</html>", "<html>Sisig<br>P170.00</html>", "<html>Pork Adobo<br>P200.00</html>", 
				"<html>Chicken Inasal<br>P120.00</html>", "<html>Inihaw na Liempo<br>P100.00</html>", "<html>Crispy Pata<br>P250.00</html>", 
				"<html>Beef Nilaga<br>P150.00</html>", "<html>Tinola<br>P150.00</html>", "<html>Bulalo<br>P200.00</html>"
			};
	
	String[] D = {
				"<html>Puto Bumbong<br>P50.00</html>", "<html>Mais Con Yelo<br>P100.00</html>", "<html>Leche Flan<br>P90.00</html>", 
				"<html>Halo-Halo<br>P70.00</html>", "<html>Puto<br>P60.00</html>", "<html>Fruit Salad<br>P50.00</html>", 
				"<html>Mango Graham Cake<br>P100.00</html>", "<html>Kalamay<br>P100.00</html>", 
				"<html>Ice Cream<br>P90.00</html>", "<html>Buko Pandan<br>P90.00</html>"
			};
	
	String[] BFShow = {
			"Longsilog","Tapsilog","Tocilog",
			"Spamsilog","Daingsilog","Chicksilog",
			"Bangsilog","Cornsilog","Hotsilog",
			"Shanghaisilog"
	};
	
	Double[] BFCalc = {
			80.00, 90.00, 70.00, 
			80.00, 90.00, 90.00,
			90.00, 80.00, 70.00,
			70.00
	};
	
	String[] MShow = {
			"Sinigang na Bangus","Kare-Kare", "Sisig", "Pork Adobo", 
			"Chicken Inasal", "Inihaw na Liempo", "Crispy Pata", 
			"Beef Nilaga", "Tinola", "Bulalo"
		};
	
	Double[] MCalc = {
			170.00, 200.00, 170.00, 200.00, 
			120.00, 100.00, 250.00,
			150.00, 150.00, 200.00
	};
	
	String[] DShow = {
			"Puto Bumbong", "Mais Con Yelo", "Leche Flan", 
			"Halo-Halo", "Puto", "Fruit Salad", 
			"Mango Graham Cake", "Kalamay", 
			"Ice Cream", "Buko Pandan"
		};
	
	Double[] DCalc = {
			50.00, 100.00, 90.00, 
			70.00, 60.00, 500.00, 
			100.00, 100.00, 
			90.00, 90.00
	};
	
	//PROCESS
	double TotalPrice = 0.00, BFnum = 0.00, Mnum = 0.00, Dnum = 0.00, DiscountPrice = 0.00;
	
	void FOS_Frame_Design(){
		JLabel BG = new JLabel(new ImageIcon(new ImageIcon("Images/Templates/Template_2.png").getImage().getScaledInstance(500, 600, Image.SCALE_SMOOTH)));
		setSize(BG.getPreferredSize());
		getContentPane().add(BG);
		BG.setBounds(0, 0, getWidth(), getHeight());
		
		setLocation(Size.width/2 - getWidth()/2, Size.height/2 - getHeight()/2);
		getContentPane().setBackground(Color.decode("#F5F5DC"));
		setResizable(false);
		setTitle("Food Ordering System");
		setIconImage(Logo.getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//COMPONENTS
		Title.setText("Breakfast");
		Title.setBounds(175, 85, 250, 40);
		Title.setFont(new Font("Georgia", Font.BOLD, 40));
		Title.setForeground(Color.black);
		Title.setBorder(null);
		Title.setFocusable(false);
		Title.setOpaque(false);
		
		//TOOLTIP EDITS
		UIManager.put("ToolTip.background", Color.white);
		UIManager.put("ToolTip.foreground", Color.black);
		UIManager.put("ToolTip.border", BorderFactory.createLineBorder(Color.black, 1));
		UIManager.put("ToolTip.font", new Font("Arial", Font.BOLD, 20));
	    int initialDelay = ToolTipManager.sharedInstance().getInitialDelay();
	    ToolTipManager.sharedInstance().setInitialDelay(10);
	    
	    //SIDE BUTTONS
	    int y = 75;
	    for (int i = 0; i < SideButt.length; i++) {
	        int index = i; // Final Variable for mouselistener
	        SideButt[index].setBounds(0, y, 69, 70);
	        y += 70;
	        SideButt[index].setBorder(null);
	        SideButt[index].setOpaque(true);
	        SideButt[index].setFocusable(false);
	        SideButt[index].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	        SideButt[index].addActionListener(this);
	        
	        if (index == 0) {
		        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        } else if (index >= 1 && index <= SideButt.length-1){
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
	    			public void mouseEntered(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#4b3a2f"))) {
	    		    		SideButt[index].setBackground(Color.decode("#695141"));
	    		    	}
	    		    }
	    		    public void mouseExited(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#695141"))) {
	    		    		SideButt[index].setBackground(Color.decode("#4b3a2f"));
	    		    	}
	    		    }
	    		});
	        } else {
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        }
	        add(SideButt[index]);
	    }
	    
		BackButt.setIcon(Back);
		BackButt.setBackground(Color.decode("#4b3a2f"));
		BackButt.setToolTipText("Back");
		
		BFButt.setIcon(BFImg);
		BFButt.setBackground(Color.decode("#695142"));
		BFButt.setToolTipText("Breakfast");
		
		MainButt.setIcon(MainImg);	
		MainButt.setBackground(Color.decode("#4b3a2f"));
		MainButt.setToolTipText("Main Courses");
		
		DessertButt.setIcon(DessertImg);
		DessertButt.setBackground(Color.decode("#4b3a2f"));
		DessertButt.setToolTipText("Desserts");

		BuyButt.setIcon(BuyImg);
		BuyButt.setBackground(Color.decode("#4b3a2f"));
		BuyButt.setToolTipText("Checkout");
		
		HelpButt.setIcon(HelpImg);
		HelpButt.setBackground(Color.decode("#4b3a2f"));
		HelpButt.setToolTipText("Help");
		
		BFPanel.setBounds(85, 150, 380, 400);
		BFPanel.setLayout(new GridLayout(5,5));
		
		MainPanel.setBounds(85, 150, 380, 400);
		MainPanel.setLayout(new GridLayout(5,5));
		MainPanel.setVisible(false);

		DPanel.setBounds(85, 150, 380, 400);
		DPanel.setLayout(new GridLayout(5,5));
		DPanel.setVisible(false);
		
		BuyPanel.setBounds(85, 180, 140, 300);
		BuyPanel.setVisible(false);
		BuyPanel.setLayout(new BorderLayout());
		
		ScrollPane.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		BuyPanel.add(ScrollPane);
		
		List.setFont(new Font("Arial", Font.BOLD, 12));
		List.setBackground(Color.white);
		List.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    int index = List.locationToIndex(e.getPoint());
                    String selectedValue = List.getModel().getElementAt(index);
                    ItemSelect.setText(selectedValue);
                    ItemSelect.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    Price.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    
                    
                    //ARRAY CHECKER AND INDEX GETTER
                    int BFIndex = -1, MIndex = -1, DIndex = -1;

                    for (int i = 0; i < BFShow.length; i++) {
                      if (BFShow[i].equals(selectedValue)) {
                    	  BFIndex = i;
                        break;
                      } else if (MShow[i].equals(selectedValue)) {
                    	  MIndex = i;
                          break;
                        } else if (DShow[i].equals(selectedValue)) {
                    	  DIndex = i;
                          break;
                        }
                    }
                    
                    //PRICE SETTER
                    if (BFIndex != -1) {
                    	  Price.setText("P" + String.format("%.2f", BFCalc[BFIndex]));
                    	}  else if (MIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", MCalc[MIndex]));
                      	} else if (DIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", DCalc[DIndex]));
                      	} 
                }
            }
        });
		
		for (int i = 0; i < BFDish.length; i++) {
			BFDish[i] = new JCheckBox(BF[i]);
			BFDish[i].setBackground(Color.decode("#e8ccb4"));
			BFDish[i].setFocusable(false);
			BFDish[i].setOpaque(true);
			BFDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			BFDish[i].addActionListener(this);
			BFDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			BFPanel.add(BFDish[i]);
			
			MDish[i] = new JCheckBox(M[i]);
			MDish[i].setBackground(Color.decode("#e8ccb4"));
			MDish[i].setFocusable(false);
			MDish[i].setOpaque(true);
			MDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			MDish[i].addActionListener(this);
			MDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			MainPanel.add(MDish[i]);
			
			DDish[i] = new JCheckBox(D[i]);
			DDish[i].setBackground(Color.decode("#e8ccb4"));
			DDish[i].setFocusable(false);
			DDish[i].setOpaque(true);
			DDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			DDish[i].addActionListener(this);
			DDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			DPanel.add(DDish[i]);
		}
		
		//BUY PANEL DESIGN
		for (int i = 0; i < BFicons.length; i++) {
		    BFDish[i].setIcon(BFicons[i]);
		    BFDish[i].setSelectedIcon(selectedBFicons[i]);
		    
		    MDish[i].setIcon(Micons[i]);
		    MDish[i].setSelectedIcon(selectedMicons[i]);
		    
		    DDish[i].setIcon(Dicons[i]);
		    DDish[i].setSelectedIcon(selectedDicons[i]);
		}
		
		//TEXT
		Order.setText("Order Details");
		Order.setBounds(92, 143, 250, 40);
		Order.setFont(new Font("Georgia", Font.BOLD, 18));
		Order.setForeground(Color.black);
		Order.setBorder(null);
		Order.setFocusable(false);
		Order.setOpaque(false);
		Order.setVisible(false);
		
		Info.setText("Billing details");
		Info.setBounds(280, 143, 250, 40);
		Info.setFont(new Font("Georgia", Font.BOLD, 18));
		Info.setForeground(Color.black);
		Info.setBorder(null);
		Info.setOpaque(false);
		Info.setVisible(false);
		
		//RIGHT SIDE
		SelectedUp.setBounds(235, 180, 230, 90);
		SelectedUp.setBackground(Color.white);
		SelectedUp.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedUp.setOpaque(true);
		SelectedUp.setVisible(false);
		
		ItemSelect.setText("Select an Item from your list");
		ItemSelect.setFont(new Font("Arial", Font.ITALIC, 14));
		ItemSelect.setForeground(Color.black);
		ItemSelect.setBounds(10, 10, 210, 30);
		ItemSelect.setBackground(Color.white);
		ItemSelect.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		ItemSelect.setOpaque(true);
		ItemSelect.setEditable(false);
		
		Price.setText("Item Price");
		Price.setBounds(10, 50, 210, 30);
		Price.setFont(new Font("Arial", Font.ITALIC, 14));
		Price.setForeground(Color.black);
		Price.setBackground(Color.white);
		Price.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Price.setOpaque(true);
		Price.setEditable(false);
		
		SelectedDown.setBounds(235, 280, 230, 200);
		SelectedDown.setBackground(Color.white);
		SelectedDown.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedDown.setOpaque(true);
		SelectedDown.setVisible(false);
		
		DiscountTxT.setText("Discounts");
		DiscountTxT.setBounds(5, 5, 250, 15);
		DiscountTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountTxT.setForeground(Color.black);
		DiscountTxT.setBorder(null);
		DiscountTxT.setOpaque(false);
		
		None.setText("None");
		None.setSelected(true);
		None.setBounds(10, 25, 70, 15);
		None.setFocusable(false);
		None.setOpaque(false);
		None.setFont(new Font("Arial", Font.PLAIN, 12));
		None.addActionListener(this);
		
		Student.setText("Student (3%)");
		Student.setSelected(true);
		Student.setBounds(70, 25, 100, 15);
		Student.setFocusable(false);
		Student.setOpaque(false);
		Student.setFont(new Font("Arial", Font.PLAIN, 12));
		Student.addActionListener(this);
		
		Senior.setText("Senior (20%)");
		Senior.setSelected(true);
		Senior.setBounds(10, 45, 100, 15);
		Senior.setFocusable(false);
		Senior.setOpaque(false);
		Senior.setFont(new Font("Arial", Font.PLAIN, 12));
		Senior.addActionListener(this);
		
		ButtGroup.add(None);
		ButtGroup.add(Student);
		ButtGroup.add(Senior);
		
		TotalTxT.setText("Total: ");
		TotalTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		TotalTxT.setBounds(5, 70, 90, 20);
		TotalTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		TotalTxT.setForeground(Color.black);
		TotalTxT.setBorder(null);
		TotalTxT.setOpaque(false);
		
		Total.setHorizontalAlignment(SwingConstants.RIGHT);
		Total.setFont(new Font("Arial", Font.PLAIN, 14));
		Total.setForeground(Color.black);
		Total.setBounds(100, 73, 120, 20);
		Total.setBackground(Color.white);
		Total.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Total.setOpaque(true);
		Total.setEditable(false);
		
		DiscountedTxT.setText("Discounted: ");
		DiscountedTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		DiscountedTxT.setBounds(5, 100, 90, 20);
		DiscountedTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountedTxT.setForeground(Color.black);
		DiscountedTxT.setBorder(null);
		DiscountedTxT.setOpaque(false);
		
		Discount.setText("P 0.00");
		Discount.setHorizontalAlignment(SwingConstants.RIGHT);
		Discount.setFont(new Font("Arial", Font.PLAIN, 14));
		Discount.setForeground(Color.black);
		Discount.setBounds(100, 103, 120, 20);
		Discount.setBackground(Color.white);
		Discount.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Discount.setOpaque(true);
		Discount.setEditable(false);
		
		PaymentTxT.setText("Payment: ");
		PaymentTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		PaymentTxT.setBounds(5, 130, 90, 20);
		PaymentTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		PaymentTxT.setForeground(Color.black);
		PaymentTxT.setBorder(null);
		PaymentTxT.setOpaque(false);
		
		Payment.setText("Enter amount");
		Payment.setHorizontalAlignment(SwingConstants.RIGHT);
		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		Payment.setForeground(Color.decode("#474747"));
		Payment.setBounds(100, 133, 120, 20);
		Payment.setBackground(Color.white);
		Payment.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Payment.setOpaque(true);
		Payment.setEditable(false);
		Payment.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().isEmpty()) {
		    		Payment.setText("Enter amount");
		    		Payment.setForeground(Color.decode("#474747"));
		    		Payment.setEditable(false);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		    public void mouseReleased(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().equals("Enter amount")) {
		    		Payment.setText("");
		    		Payment.setForeground(Color.BLACK);
		    		Payment.setEditable(true);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		});
		
		Payment.addKeyListener(new java.awt.event.KeyAdapter() {
		    public void keyPressed(java.awt.event.KeyEvent e) {
		    if (e.getKeyCode() == KeyEvent.VK_ENTER ) {
		    	
		     } 
		   }
		});
		
		ChangeTxT.setText("Change: ");
		ChangeTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		ChangeTxT.setBounds(5, 160, 90, 20);
		ChangeTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		ChangeTxT.setForeground(Color.black);
		ChangeTxT.setBorder(null);
		ChangeTxT.setOpaque(false);
		
		Change.setHorizontalAlignment(SwingConstants.RIGHT);
		Change.setFont(new Font("Arial", Font.PLAIN, 14));
		Change.setForeground(Color.black);
		Change.setBounds(100, 163, 120, 20);
		Change.setBackground(Color.white);
		Change.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Change.setOpaque(true);
		Change.setEditable(false);
		
		//CONFIRM
		DownBar.setBounds(0, 495, 500, 100);
		DownBar.setBackground(Color.decode("#4b3a2f"));
		DownBar.setBorder(null);
		DownBar.setOpaque(true);
		DownBar.setVisible(false);
		
		Cancel.setText("Cancel");
		Cancel.setBounds(85, 15, 140, 35);
		Cancel.setFont(new Font("Helvetica", Font.BOLD, 16));
		Cancel.setForeground(Color.black);
		Cancel.setBackground(Color.decode("#f5b8b8"));
		Cancel.setOpaque(true);
		Cancel.setBorder(null);
		Cancel.setFocusable(false);
		Cancel.addActionListener(this);
		Cancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f72525"));
		    	Cancel.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f5b8b8"));
		    	Cancel.setForeground(Color.black);
		    }
		});
		
		Confirm.setText("Confirm");
		Confirm.setBounds(280, 15, 140, 35);
		Confirm.setFont(new Font("Helvetica", Font.BOLD, 16));
		Confirm.setForeground(Color.black);
		Confirm.setBackground(Color.decode("#bbf5b8"));
		Confirm.setOpaque(true);
		Confirm.setBorder(null);
		Confirm.setFocusable(false);
		Confirm.addActionListener(this);
		Confirm.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Confirm.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#02bf34"));
		    	Confirm.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#bbf5b8"));
		    	Confirm.setForeground(Color.black);
		    }
		});
		
		//ADD
		add(Title);
		add(Order);
		add(Info);
		add(SelectedUp);
		SelectedUp.add(ItemSelect);
		SelectedUp.add(Price);
		
		add(SelectedDown);
		SelectedDown.add(TotalTxT);
		SelectedDown.add(DiscountTxT);
		SelectedDown.add(DiscountedTxT);
		SelectedDown.add(PaymentTxT);
		SelectedDown.add(ChangeTxT);
		SelectedDown.add(Total);
		SelectedDown.add(Discount);
		SelectedDown.add(Payment);
		SelectedDown.add(Change);
		SelectedDown.add(None);
		SelectedDown.add(Senior);
		SelectedDown.add(Student);
		
		add(DownBar);
		DownBar.add(Confirm);
		DownBar.add(Cancel);
		
		add(BFPanel);
		add(MainPanel);
		add(DPanel);
		add(BuyPanel);
		
		getContentPane().setComponentZOrder(Title, 0);
		getContentPane().setComponentZOrder(BFPanel, 0);
		getContentPane().setComponentZOrder(MainPanel, 0);
		getContentPane().setComponentZOrder(DPanel, 0);
		getContentPane().setComponentZOrder(BuyPanel, 0);
		getContentPane().setComponentZOrder(Order, 0);
		getContentPane().setComponentZOrder(Info, 0);
		getContentPane().setComponentZOrder(SelectedDown, 0);
		getContentPane().setComponentZOrder(SelectedUp, 0);
		getContentPane().setComponentZOrder(DownBar, 0);
		for (int i = 0; i < SideButt.length; i++) {
		    getContentPane().setComponentZOrder(SideButt[i], 0);
		}
		setLayout(null);
		setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		for(int i = 0; i < BFDish.length;i++ ) {
    		if(e.getSource().equals(BFDish[i])) {
    			if(BFDish[i].isSelected()) {
        			ListModel.addElement(BFShow[i]);
    			} else {
    				ListModel.removeElement(BFShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < MDish.length;i++ ) {
    		if(e.getSource().equals(MDish[i])) {
    			if(MDish[i].isSelected()) {
        			ListModel.addElement(MShow[i]);
    			} else {
    				ListModel.removeElement(MShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < DDish.length;i++ ) {
    		if(e.getSource().equals(DDish[i])) {
    			if(DDish[i].isSelected()) {
        			ListModel.addElement(DShow[i]);
    			} else {
    				ListModel.removeElement(DShow[i]);
    			}
    		}
		}
		
		if (e.getSource() == BackButt) {
		    int Back = JOptionPane.showConfirmDialog(this, "Go back and discard order?", "Back", JOptionPane.YES_NO_OPTION);
		    if (Back == JOptionPane.YES_OPTION) {
		        FOS_Dine_Take Fos = new FOS_Dine_Take();
		        Fos.FOS_Dine_Take_Design();
		        dispose();
		    }
		}
		
		//PROCESS
		
	    if (e.getSource() == BFButt) {
	   
	        Title.setText("Breakfast");
	        BFButt.setBackground(Color.decode("#695142"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(true);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == MainButt) {
	    	
	        Title.setText("Main Course");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#695142"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(140, 85, 280, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(true);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedDown.setVisible(false);
	        SelectedUp.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == DessertButt) {
	    	
	        Title.setText("Desserts");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#695142"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(true);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == BuyButt) {
	    	
	        Title.setText("Checkout");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#695142"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(true);
	        Order.setVisible(true);
	        Info.setVisible(true);
	        SelectedUp.setVisible(true);
	        SelectedDown.setVisible(true);
	        DownBar.setVisible(true);
	        
	        //PROCESS
	        
	      //------------------------------------------------------------------
	        
	        int size = ListModel.getSize();
	        
	        if (size == 0) {
	        	Total.setText("P 0.00");
	        } else {
	        	for (int i = 0; i < size; i++) {
	  			  String element = ListModel.getElementAt(i);
	  			  
	  					//ARRAY CHECKER AND INDEX GETTER
	  		             int BFIndex = -1, MIndex = -1, DIndex = -1;
	  		
	  		             for (int x = 0; x < BFShow.length; x++) {
	  		               if (BFShow[x].equals(element)) {
	  		             	  BFIndex = x;
	  		                 break;
	  		               } else if (MShow[x].equals(element)) {
	  		             	  MIndex = x;
	  		                   break;
	  		                 } else if (DShow[x].equals(element)) {
	  		             	  DIndex = x;
	  		                   break;
	  		                 }
	  		             }
	               
	  		           //PRICE SETTER
	  		             if (BFIndex != -1) {
	  		            	 	BFnum += BFCalc[BFIndex];
	  		             	}  else if (MIndex != -1) {
	  		             		Mnum += MCalc[MIndex];
	  		               	} else if (DIndex != -1) {
	  		               		Dnum += DCalc[DIndex];
	  		               	} 
	  		             
	  		             TotalPrice = BFnum + Mnum + Dnum;
	  		             Total.setText("P " + String.format("%.2f", TotalPrice));
	  			}
	        }
	      //------------------------------------------------------------------
	    } else if (e.getSource() == HelpButt) {
	    	JOptionPane.showMessageDialog(null, "<html>To select the item(s) you want to order, simply <u>tap or click</u> on the area near the food you have chosen.<br> Once selected, a check mark will appear next to the item to indicate that it has been chosen.</html>", "How to use!", JOptionPane.INFORMATION_MESSAGE);	    	
	    }
	    
	  //------------------------------------------------------------------
	    if (e.getSource() == None || e.getSource() == Student || e.getSource() == Senior) {
			if(None.isSelected() == true) {
				Discount.setText("P 0.00");
			} else if(Student.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.03;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			} else if(Senior.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.2;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			}
		}
	  //------------------------------------------------------------------
	    
	    (TotalPrice - DiscountPrice)
	    Change.setText("99");
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-21 19:01:14.404
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-21 19:01:14.408
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-21 19:01:14.412
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-21 19:01:14.416
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-21 19:01:15.000
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package foodOrderingSystem;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;

import javax.swing.*;

public class FOS_Frame extends JFrame implements ActionListener{
	//IMAGES
	ImageIcon Logo = new ImageIcon(new ImageIcon("Images/Logo-FOS.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
	ImageIcon Back = new ImageIcon(new ImageIcon("Images/SideLogos/Back.png").getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
	ImageIcon BFImg = new ImageIcon(new ImageIcon("Images/SideLogos/BF.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MainImg = new ImageIcon(new ImageIcon("Images/SideLogos/Main.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DessertImg = new ImageIcon(new ImageIcon("Images/SideLogos/Dessert.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BuyImg = new ImageIcon(new ImageIcon("Images/SideLogos/Buy.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HelpImg = new ImageIcon(new ImageIcon("Images/SideLogos/help.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//Breakfast
	ImageIcon LSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Longsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/LongsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tapsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TapsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tocilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TocilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Spamsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/SpamsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Daingsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/DaingsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Chicksilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ChicksilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Bangsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/BangsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Cornsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/CornsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Hotsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/HotsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Shanghaisilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ShanghaisilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//BF ARRAY
	ImageIcon[] BFicons = {
			LSilog, TSilog, ToSilog, SSilog, DSilog, CSilog, BSilog, CoSilog, HSilog, ShSilog
		};

	ImageIcon[] selectedBFicons = {
		    LSilogCheck, TSilogCheck, ToSilogCheck, SSilogCheck, DSilogCheck, CSilogCheck,BSilogCheck, CoSilogCheck, HSilogCheck, ShSilogCheck
		};
	
	//MAIN DISHES IMAGES
	ImageIcon Sinigang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sinigang.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SinigangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SinigangCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kare = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Kare.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KareCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/KareCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Sisig = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sisig.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SisigCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SisigCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Adobo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Adobo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon AdoboCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/AdoboCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Chicken = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Chicken.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ChickenCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/ChickenCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Inihaw = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Inihaw.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon InihawCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/InihawCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Crispy = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Pata.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CrispyCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/PataCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Nilagang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Nilaga.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon NilagangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/NilagaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Tinola = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Tinola.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TinolaCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/TinolaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Bulalo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Bulalo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BulaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/BulaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//MAIN ARRAY
	ImageIcon[] Micons = {
			Sinigang, Kare, Sisig, Adobo, Chicken, Inihaw, Crispy, Nilagang, Tinola, Bulalo
		};

	ImageIcon[] selectedMicons = {
			SinigangCheck, KareCheck, SisigCheck, AdoboCheck, ChickenCheck, InihawCheck, CrispyCheck, NilagangCheck, TinolaCheck, BulaloCheck
		};
	
	//DESSERT IMAGES
	ImageIcon Bumbong = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Bumbong.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BumbongCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/BumbongCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mais = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mais.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MaisCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MaisCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Leche = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Leche.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LecheCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/LecheCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Halo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Halo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/HaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Puto = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Puto.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PutoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PutoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Fruit = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Fruit.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon FruitCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/FruitCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mango = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mango.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MangoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MangoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kalamay = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Kalamay.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KalamayCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/KalamayCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Ice = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Ice.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon IceCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/IceCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Pandan = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Pandan.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PandanCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PandanCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//DESSERT ARRAY
	ImageIcon[] Dicons = {
			Bumbong, Mais, Leche, Halo, Puto, Fruit, Mango, Kalamay, Ice, Pandan
		};

	ImageIcon[] selectedDicons = {
			BumbongCheck, MaisCheck, LecheCheck, HaloCheck, PutoCheck, FruitCheck, MangoCheck, KalamayCheck, IceCheck, PandanCheck
		};
	
	//TOOLKITS
	Toolkit ToolK = getToolkit();
	Dimension Size = ToolK.getScreenSize();
	
	//DINE IN OR TAKE OUT FROM OTHER CLASS
	String DT;
	
	//INITIALIZE 
	DefaultListModel<String> ListModel = new DefaultListModel();
	JList<String> List = new JList<String>(ListModel);
	JScrollPane ScrollPane = new JScrollPane(List);
	
	JPanel BFPanel = new JPanel();
	JPanel MainPanel = new JPanel();
	JPanel DPanel = new JPanel();
	JPanel BuyPanel = new JPanel();
	
	JLabel 
			Title = new JLabel(), Order = new JLabel(), 
			DownBar = new JLabel(), SelectedUp = new JLabel(), SelectedDown = new JLabel(), 
			Info = new JLabel(), DiscountTxT = new JLabel(), TotalTxT = new JLabel(), DiscountedTxT = new JLabel(), PaymentTxT = new JLabel(), ChangeTxT = new JLabel(); 
	
	JTextField 
			ItemSelect = new JTextField(), Price = new JTextField(), 
			Total = new JTextField(), Discount = new JTextField(), Payment = new JTextField(), Change = new JTextField();
	
	JButton BackButt, BFButt, MainButt, DessertButt, BuyButt, HelpButt, 
			Confirm = new JButton(), Cancel = new JButton();
	
	JRadioButton None = new JRadioButton(), Student = new JRadioButton(), Senior = new JRadioButton();
	ButtonGroup ButtGroup = new ButtonGroup();
	
	//ARRAYS FOR LOOPS
	JButton[] SideButt = {
				BackButt = new JButton(), BFButt = new JButton(), 
				MainButt = new JButton(), DessertButt = new JButton(), 
				BuyButt = new JButton(), HelpButt = new JButton()
			};
	
	JCheckBox[] BFDish = new JCheckBox[10];
	JCheckBox[] MDish = new JCheckBox[10];
	JCheckBox[] DDish = new JCheckBox[10];
	
	//ARRAYS FOR LOOPS BUT FOR SET TEXTS
	String[] BF = {
				"<html>Longsilog <br>P80.00</html>", "<html>Tapsilog <br>P90.00</html>", "<html>Tocilog <br>P70.00</html>", 
				"<html>Spamsilog <br>P80.00</html>", "<html>Daingsilog <br>P90.00</html>", "<html>Chicksilog <br>P90.00</html>", 
				"<html>Bangsilog <br>P90.00</html>", "<html>Cornsilog <br>P80.00</html>", "<html>Hotsilog <br>P70.00</html>", 
				"<html>Shanghaisilog <br>P70.00</html>"
			};
	
	String[] M = {
				"<html>Sinigang na Bangus<br>P170.00</html>", "<html>Kare-Kare<br>P200.00</html>", "<html>Sisig<br>P170.00</html>", "<html>Pork Adobo<br>P200.00</html>", 
				"<html>Chicken Inasal<br>P120.00</html>", "<html>Inihaw na Liempo<br>P100.00</html>", "<html>Crispy Pata<br>P250.00</html>", 
				"<html>Beef Nilaga<br>P150.00</html>", "<html>Tinola<br>P150.00</html>", "<html>Bulalo<br>P200.00</html>"
			};
	
	String[] D = {
				"<html>Puto Bumbong<br>P50.00</html>", "<html>Mais Con Yelo<br>P100.00</html>", "<html>Leche Flan<br>P90.00</html>", 
				"<html>Halo-Halo<br>P70.00</html>", "<html>Puto<br>P60.00</html>", "<html>Fruit Salad<br>P50.00</html>", 
				"<html>Mango Graham Cake<br>P100.00</html>", "<html>Kalamay<br>P100.00</html>", 
				"<html>Ice Cream<br>P90.00</html>", "<html>Buko Pandan<br>P90.00</html>"
			};
	
	String[] BFShow = {
			"Longsilog","Tapsilog","Tocilog",
			"Spamsilog","Daingsilog","Chicksilog",
			"Bangsilog","Cornsilog","Hotsilog",
			"Shanghaisilog"
	};
	
	Double[] BFCalc = {
			80.00, 90.00, 70.00, 
			80.00, 90.00, 90.00,
			90.00, 80.00, 70.00,
			70.00
	};
	
	String[] MShow = {
			"Sinigang na Bangus","Kare-Kare", "Sisig", "Pork Adobo", 
			"Chicken Inasal", "Inihaw na Liempo", "Crispy Pata", 
			"Beef Nilaga", "Tinola", "Bulalo"
		};
	
	Double[] MCalc = {
			170.00, 200.00, 170.00, 200.00, 
			120.00, 100.00, 250.00,
			150.00, 150.00, 200.00
	};
	
	String[] DShow = {
			"Puto Bumbong", "Mais Con Yelo", "Leche Flan", 
			"Halo-Halo", "Puto", "Fruit Salad", 
			"Mango Graham Cake", "Kalamay", 
			"Ice Cream", "Buko Pandan"
		};
	
	Double[] DCalc = {
			50.00, 100.00, 90.00, 
			70.00, 60.00, 500.00, 
			100.00, 100.00, 
			90.00, 90.00
	};
	
	//PROCESS
	double TotalPrice = 0.00, BFnum = 0.00, Mnum = 0.00, Dnum = 0.00, DiscountPrice = 0.00;
	
	void FOS_Frame_Design(){
		JLabel BG = new JLabel(new ImageIcon(new ImageIcon("Images/Templates/Template_2.png").getImage().getScaledInstance(500, 600, Image.SCALE_SMOOTH)));
		setSize(BG.getPreferredSize());
		getContentPane().add(BG);
		BG.setBounds(0, 0, getWidth(), getHeight());
		
		setLocation(Size.width/2 - getWidth()/2, Size.height/2 - getHeight()/2);
		getContentPane().setBackground(Color.decode("#F5F5DC"));
		setResizable(false);
		setTitle("Food Ordering System");
		setIconImage(Logo.getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//COMPONENTS
		Title.setText("Breakfast");
		Title.setBounds(175, 85, 250, 40);
		Title.setFont(new Font("Georgia", Font.BOLD, 40));
		Title.setForeground(Color.black);
		Title.setBorder(null);
		Title.setFocusable(false);
		Title.setOpaque(false);
		
		//TOOLTIP EDITS
		UIManager.put("ToolTip.background", Color.white);
		UIManager.put("ToolTip.foreground", Color.black);
		UIManager.put("ToolTip.border", BorderFactory.createLineBorder(Color.black, 1));
		UIManager.put("ToolTip.font", new Font("Arial", Font.BOLD, 20));
	    int initialDelay = ToolTipManager.sharedInstance().getInitialDelay();
	    ToolTipManager.sharedInstance().setInitialDelay(10);
	    
	    //SIDE BUTTONS
	    int y = 75;
	    for (int i = 0; i < SideButt.length; i++) {
	        int index = i; // Final Variable for mouselistener
	        SideButt[index].setBounds(0, y, 69, 70);
	        y += 70;
	        SideButt[index].setBorder(null);
	        SideButt[index].setOpaque(true);
	        SideButt[index].setFocusable(false);
	        SideButt[index].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	        SideButt[index].addActionListener(this);
	        
	        if (index == 0) {
		        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        } else if (index >= 1 && index <= SideButt.length-1){
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
	    			public void mouseEntered(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#4b3a2f"))) {
	    		    		SideButt[index].setBackground(Color.decode("#695141"));
	    		    	}
	    		    }
	    		    public void mouseExited(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#695141"))) {
	    		    		SideButt[index].setBackground(Color.decode("#4b3a2f"));
	    		    	}
	    		    }
	    		});
	        } else {
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        }
	        add(SideButt[index]);
	    }
	    
		BackButt.setIcon(Back);
		BackButt.setBackground(Color.decode("#4b3a2f"));
		BackButt.setToolTipText("Back");
		
		BFButt.setIcon(BFImg);
		BFButt.setBackground(Color.decode("#695142"));
		BFButt.setToolTipText("Breakfast");
		
		MainButt.setIcon(MainImg);	
		MainButt.setBackground(Color.decode("#4b3a2f"));
		MainButt.setToolTipText("Main Courses");
		
		DessertButt.setIcon(DessertImg);
		DessertButt.setBackground(Color.decode("#4b3a2f"));
		DessertButt.setToolTipText("Desserts");

		BuyButt.setIcon(BuyImg);
		BuyButt.setBackground(Color.decode("#4b3a2f"));
		BuyButt.setToolTipText("Checkout");
		
		HelpButt.setIcon(HelpImg);
		HelpButt.setBackground(Color.decode("#4b3a2f"));
		HelpButt.setToolTipText("Help");
		
		BFPanel.setBounds(85, 150, 380, 400);
		BFPanel.setLayout(new GridLayout(5,5));
		
		MainPanel.setBounds(85, 150, 380, 400);
		MainPanel.setLayout(new GridLayout(5,5));
		MainPanel.setVisible(false);

		DPanel.setBounds(85, 150, 380, 400);
		DPanel.setLayout(new GridLayout(5,5));
		DPanel.setVisible(false);
		
		BuyPanel.setBounds(85, 180, 140, 300);
		BuyPanel.setVisible(false);
		BuyPanel.setLayout(new BorderLayout());
		
		ScrollPane.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		BuyPanel.add(ScrollPane);
		
		List.setFont(new Font("Arial", Font.BOLD, 12));
		List.setBackground(Color.white);
		List.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    int index = List.locationToIndex(e.getPoint());
                    String selectedValue = List.getModel().getElementAt(index);
                    ItemSelect.setText(selectedValue);
                    ItemSelect.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    Price.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    
                    
                    //ARRAY CHECKER AND INDEX GETTER
                    int BFIndex = -1, MIndex = -1, DIndex = -1;

                    for (int i = 0; i < BFShow.length; i++) {
                      if (BFShow[i].equals(selectedValue)) {
                    	  BFIndex = i;
                        break;
                      } else if (MShow[i].equals(selectedValue)) {
                    	  MIndex = i;
                          break;
                        } else if (DShow[i].equals(selectedValue)) {
                    	  DIndex = i;
                          break;
                        }
                    }
                    
                    //PRICE SETTER
                    if (BFIndex != -1) {
                    	  Price.setText("P" + String.format("%.2f", BFCalc[BFIndex]));
                    	}  else if (MIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", MCalc[MIndex]));
                      	} else if (DIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", DCalc[DIndex]));
                      	} 
                }
            }
        });
		
		for (int i = 0; i < BFDish.length; i++) {
			BFDish[i] = new JCheckBox(BF[i]);
			BFDish[i].setBackground(Color.decode("#e8ccb4"));
			BFDish[i].setFocusable(false);
			BFDish[i].setOpaque(true);
			BFDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			BFDish[i].addActionListener(this);
			BFDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			BFPanel.add(BFDish[i]);
			
			MDish[i] = new JCheckBox(M[i]);
			MDish[i].setBackground(Color.decode("#e8ccb4"));
			MDish[i].setFocusable(false);
			MDish[i].setOpaque(true);
			MDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			MDish[i].addActionListener(this);
			MDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			MainPanel.add(MDish[i]);
			
			DDish[i] = new JCheckBox(D[i]);
			DDish[i].setBackground(Color.decode("#e8ccb4"));
			DDish[i].setFocusable(false);
			DDish[i].setOpaque(true);
			DDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			DDish[i].addActionListener(this);
			DDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			DPanel.add(DDish[i]);
		}
		
		//BUY PANEL DESIGN
		for (int i = 0; i < BFicons.length; i++) {
		    BFDish[i].setIcon(BFicons[i]);
		    BFDish[i].setSelectedIcon(selectedBFicons[i]);
		    
		    MDish[i].setIcon(Micons[i]);
		    MDish[i].setSelectedIcon(selectedMicons[i]);
		    
		    DDish[i].setIcon(Dicons[i]);
		    DDish[i].setSelectedIcon(selectedDicons[i]);
		}
		
		//TEXT
		Order.setText("Order Details");
		Order.setBounds(92, 143, 250, 40);
		Order.setFont(new Font("Georgia", Font.BOLD, 18));
		Order.setForeground(Color.black);
		Order.setBorder(null);
		Order.setFocusable(false);
		Order.setOpaque(false);
		Order.setVisible(false);
		
		Info.setText("Billing details");
		Info.setBounds(280, 143, 250, 40);
		Info.setFont(new Font("Georgia", Font.BOLD, 18));
		Info.setForeground(Color.black);
		Info.setBorder(null);
		Info.setOpaque(false);
		Info.setVisible(false);
		
		//RIGHT SIDE
		SelectedUp.setBounds(235, 180, 230, 90);
		SelectedUp.setBackground(Color.white);
		SelectedUp.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedUp.setOpaque(true);
		SelectedUp.setVisible(false);
		
		ItemSelect.setText("Select an Item from your list");
		ItemSelect.setFont(new Font("Arial", Font.ITALIC, 14));
		ItemSelect.setForeground(Color.black);
		ItemSelect.setBounds(10, 10, 210, 30);
		ItemSelect.setBackground(Color.white);
		ItemSelect.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		ItemSelect.setOpaque(true);
		ItemSelect.setEditable(false);
		
		Price.setText("Item Price");
		Price.setBounds(10, 50, 210, 30);
		Price.setFont(new Font("Arial", Font.ITALIC, 14));
		Price.setForeground(Color.black);
		Price.setBackground(Color.white);
		Price.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Price.setOpaque(true);
		Price.setEditable(false);
		
		SelectedDown.setBounds(235, 280, 230, 200);
		SelectedDown.setBackground(Color.white);
		SelectedDown.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedDown.setOpaque(true);
		SelectedDown.setVisible(false);
		
		DiscountTxT.setText("Discounts");
		DiscountTxT.setBounds(5, 5, 250, 15);
		DiscountTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountTxT.setForeground(Color.black);
		DiscountTxT.setBorder(null);
		DiscountTxT.setOpaque(false);
		
		None.setText("None");
		None.setSelected(true);
		None.setBounds(10, 25, 70, 15);
		None.setFocusable(false);
		None.setOpaque(false);
		None.setFont(new Font("Arial", Font.PLAIN, 12));
		None.addActionListener(this);
		
		Student.setText("Student (3%)");
		Student.setSelected(true);
		Student.setBounds(70, 25, 100, 15);
		Student.setFocusable(false);
		Student.setOpaque(false);
		Student.setFont(new Font("Arial", Font.PLAIN, 12));
		Student.addActionListener(this);
		
		Senior.setText("Senior (20%)");
		Senior.setSelected(true);
		Senior.setBounds(10, 45, 100, 15);
		Senior.setFocusable(false);
		Senior.setOpaque(false);
		Senior.setFont(new Font("Arial", Font.PLAIN, 12));
		Senior.addActionListener(this);
		
		ButtGroup.add(None);
		ButtGroup.add(Student);
		ButtGroup.add(Senior);
		
		TotalTxT.setText("Total: ");
		TotalTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		TotalTxT.setBounds(5, 70, 90, 20);
		TotalTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		TotalTxT.setForeground(Color.black);
		TotalTxT.setBorder(null);
		TotalTxT.setOpaque(false);
		
		Total.setHorizontalAlignment(SwingConstants.RIGHT);
		Total.setFont(new Font("Arial", Font.PLAIN, 14));
		Total.setForeground(Color.black);
		Total.setBounds(100, 73, 120, 20);
		Total.setBackground(Color.white);
		Total.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Total.setOpaque(true);
		Total.setEditable(false);
		
		DiscountedTxT.setText("Discounted: ");
		DiscountedTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		DiscountedTxT.setBounds(5, 100, 90, 20);
		DiscountedTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountedTxT.setForeground(Color.black);
		DiscountedTxT.setBorder(null);
		DiscountedTxT.setOpaque(false);
		
		Discount.setText("P 0.00");
		Discount.setHorizontalAlignment(SwingConstants.RIGHT);
		Discount.setFont(new Font("Arial", Font.PLAIN, 14));
		Discount.setForeground(Color.black);
		Discount.setBounds(100, 103, 120, 20);
		Discount.setBackground(Color.white);
		Discount.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Discount.setOpaque(true);
		Discount.setEditable(false);
		
		PaymentTxT.setText("Payment: ");
		PaymentTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		PaymentTxT.setBounds(5, 130, 90, 20);
		PaymentTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		PaymentTxT.setForeground(Color.black);
		PaymentTxT.setBorder(null);
		PaymentTxT.setOpaque(false);
		
		Payment.setText("Enter amount");
		Payment.setHorizontalAlignment(SwingConstants.RIGHT);
		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		Payment.setForeground(Color.decode("#474747"));
		Payment.setBounds(100, 133, 120, 20);
		Payment.setBackground(Color.white);
		Payment.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Payment.setOpaque(true);
		Payment.setEditable(false);
		Payment.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().isEmpty()) {
		    		Payment.setText("Enter amount");
		    		Payment.setForeground(Color.decode("#474747"));
		    		Payment.setEditable(false);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		    public void mouseReleased(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().equals("Enter amount")) {
		    		Payment.setText("");
		    		Payment.setForeground(Color.BLACK);
		    		Payment.setEditable(true);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		});
		
		Payment.addKeyListener(new java.awt.event.KeyAdapter() {
		    public void keyPressed(java.awt.event.KeyEvent e) {
		    if (e.getKeyCode() == KeyEvent.VK_ENTER ) {
		    	
		     } 
		   }
		});
		
		ChangeTxT.setText("Change: ");
		ChangeTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		ChangeTxT.setBounds(5, 160, 90, 20);
		ChangeTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		ChangeTxT.setForeground(Color.black);
		ChangeTxT.setBorder(null);
		ChangeTxT.setOpaque(false);
		
		Change.setHorizontalAlignment(SwingConstants.RIGHT);
		Change.setFont(new Font("Arial", Font.PLAIN, 14));
		Change.setForeground(Color.black);
		Change.setBounds(100, 163, 120, 20);
		Change.setBackground(Color.white);
		Change.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Change.setOpaque(true);
		Change.setEditable(false);
		
		//CONFIRM
		DownBar.setBounds(0, 495, 500, 100);
		DownBar.setBackground(Color.decode("#4b3a2f"));
		DownBar.setBorder(null);
		DownBar.setOpaque(true);
		DownBar.setVisible(false);
		
		Cancel.setText("Cancel");
		Cancel.setBounds(85, 15, 140, 35);
		Cancel.setFont(new Font("Helvetica", Font.BOLD, 16));
		Cancel.setForeground(Color.black);
		Cancel.setBackground(Color.decode("#f5b8b8"));
		Cancel.setOpaque(true);
		Cancel.setBorder(null);
		Cancel.setFocusable(false);
		Cancel.addActionListener(this);
		Cancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f72525"));
		    	Cancel.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f5b8b8"));
		    	Cancel.setForeground(Color.black);
		    }
		});
		
		Confirm.setText("Confirm");
		Confirm.setBounds(280, 15, 140, 35);
		Confirm.setFont(new Font("Helvetica", Font.BOLD, 16));
		Confirm.setForeground(Color.black);
		Confirm.setBackground(Color.decode("#bbf5b8"));
		Confirm.setOpaque(true);
		Confirm.setBorder(null);
		Confirm.setFocusable(false);
		Confirm.addActionListener(this);
		Confirm.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Confirm.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#02bf34"));
		    	Confirm.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#bbf5b8"));
		    	Confirm.setForeground(Color.black);
		    }
		});
		
		//ADD
		add(Title);
		add(Order);
		add(Info);
		add(SelectedUp);
		SelectedUp.add(ItemSelect);
		SelectedUp.add(Price);
		
		add(SelectedDown);
		SelectedDown.add(TotalTxT);
		SelectedDown.add(DiscountTxT);
		SelectedDown.add(DiscountedTxT);
		SelectedDown.add(PaymentTxT);
		SelectedDown.add(ChangeTxT);
		SelectedDown.add(Total);
		SelectedDown.add(Discount);
		SelectedDown.add(Payment);
		SelectedDown.add(Change);
		SelectedDown.add(None);
		SelectedDown.add(Senior);
		SelectedDown.add(Student);
		
		add(DownBar);
		DownBar.add(Confirm);
		DownBar.add(Cancel);
		
		add(BFPanel);
		add(MainPanel);
		add(DPanel);
		add(BuyPanel);
		
		getContentPane().setComponentZOrder(Title, 0);
		getContentPane().setComponentZOrder(BFPanel, 0);
		getContentPane().setComponentZOrder(MainPanel, 0);
		getContentPane().setComponentZOrder(DPanel, 0);
		getContentPane().setComponentZOrder(BuyPanel, 0);
		getContentPane().setComponentZOrder(Order, 0);
		getContentPane().setComponentZOrder(Info, 0);
		getContentPane().setComponentZOrder(SelectedDown, 0);
		getContentPane().setComponentZOrder(SelectedUp, 0);
		getContentPane().setComponentZOrder(DownBar, 0);
		for (int i = 0; i < SideButt.length; i++) {
		    getContentPane().setComponentZOrder(SideButt[i], 0);
		}
		setLayout(null);
		setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		for(int i = 0; i < BFDish.length;i++ ) {
    		if(e.getSource().equals(BFDish[i])) {
    			if(BFDish[i].isSelected()) {
        			ListModel.addElement(BFShow[i]);
    			} else {
    				ListModel.removeElement(BFShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < MDish.length;i++ ) {
    		if(e.getSource().equals(MDish[i])) {
    			if(MDish[i].isSelected()) {
        			ListModel.addElement(MShow[i]);
    			} else {
    				ListModel.removeElement(MShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < DDish.length;i++ ) {
    		if(e.getSource().equals(DDish[i])) {
    			if(DDish[i].isSelected()) {
        			ListModel.addElement(DShow[i]);
    			} else {
    				ListModel.removeElement(DShow[i]);
    			}
    		}
		}
		
		if (e.getSource() == BackButt) {
		    int Back = JOptionPane.showConfirmDialog(this, "Go back and discard order?", "Back", JOptionPane.YES_NO_OPTION);
		    if (Back == JOptionPane.YES_OPTION) {
		        FOS_Dine_Take Fos = new FOS_Dine_Take();
		        Fos.FOS_Dine_Take_Design();
		        dispose();
		    }
		}
		
		//PROCESS
		
	    if (e.getSource() == BFButt) {
	   
	        Title.setText("Breakfast");
	        BFButt.setBackground(Color.decode("#695142"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(true);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == MainButt) {
	    	
	        Title.setText("Main Course");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#695142"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(140, 85, 280, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(true);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedDown.setVisible(false);
	        SelectedUp.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == DessertButt) {
	    	
	        Title.setText("Desserts");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#695142"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(true);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == BuyButt) {
	    	
	        Title.setText("Checkout");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#695142"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(true);
	        Order.setVisible(true);
	        Info.setVisible(true);
	        SelectedUp.setVisible(true);
	        SelectedDown.setVisible(true);
	        DownBar.setVisible(true);
	        
	        //PROCESS
	        
	      //------------------------------------------------------------------
	        
	        int size = ListModel.getSize();
	        
	        if (size == 0) {
	        	Total.setText("P 0.00");
	        } else {
	        	for (int i = 0; i < size; i++) {
	  			  String element = ListModel.getElementAt(i);
	  			  
	  					//ARRAY CHECKER AND INDEX GETTER
	  		             int BFIndex = -1, MIndex = -1, DIndex = -1;
	  		
	  		             for (int x = 0; x < BFShow.length; x++) {
	  		               if (BFShow[x].equals(element)) {
	  		             	  BFIndex = x;
	  		                 break;
	  		               } else if (MShow[x].equals(element)) {
	  		             	  MIndex = x;
	  		                   break;
	  		                 } else if (DShow[x].equals(element)) {
	  		             	  DIndex = x;
	  		                   break;
	  		                 }
	  		             }
	               
	  		           //PRICE SETTER
	  		             if (BFIndex != -1) {
	  		            	 	BFnum += BFCalc[BFIndex];
	  		             	}  else if (MIndex != -1) {
	  		             		Mnum += MCalc[MIndex];
	  		               	} else if (DIndex != -1) {
	  		               		Dnum += DCalc[DIndex];
	  		               	} 
	  		             
	  		             TotalPrice = BFnum + Mnum + Dnum;
	  		             Total.setText("P " + String.format("%.2f", TotalPrice));
	  			}
	        }
	      //------------------------------------------------------------------
	    } else if (e.getSource() == HelpButt) {
	    	JOptionPane.showMessageDialog(null, "<html>To select the item(s) you want to order, simply <u>tap or click</u> on the area near the food you have chosen.<br> Once selected, a check mark will appear next to the item to indicate that it has been chosen.</html>", "How to use!", JOptionPane.INFORMATION_MESSAGE);	    	
	    }
	    
	  //------------------------------------------------------------------
	    if (e.getSource() == None || e.getSource() == Student || e.getSource() == Senior) {
			if(None.isSelected() == true) {
				Discount.setText("P 0.00");
			} else if(Student.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.03;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			} else if(Senior.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.2;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			}
		}
	  //------------------------------------------------------------------
	    
	    (TotalPrice - DiscountPrice)
	    Change.setText("99");
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-21 19:01:15.002
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-21 19:01:15.005
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-21 19:01:15.935
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package foodOrderingSystem;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;

import javax.swing.*;

public class FOS_Frame extends JFrame implements ActionListener{
	//IMAGES
	ImageIcon Logo = new ImageIcon(new ImageIcon("Images/Logo-FOS.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
	ImageIcon Back = new ImageIcon(new ImageIcon("Images/SideLogos/Back.png").getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
	ImageIcon BFImg = new ImageIcon(new ImageIcon("Images/SideLogos/BF.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MainImg = new ImageIcon(new ImageIcon("Images/SideLogos/Main.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DessertImg = new ImageIcon(new ImageIcon("Images/SideLogos/Dessert.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BuyImg = new ImageIcon(new ImageIcon("Images/SideLogos/Buy.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HelpImg = new ImageIcon(new ImageIcon("Images/SideLogos/help.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//Breakfast
	ImageIcon LSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Longsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/LongsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tapsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TapsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tocilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TocilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Spamsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/SpamsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Daingsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/DaingsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Chicksilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ChicksilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Bangsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/BangsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Cornsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/CornsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Hotsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/HotsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Shanghaisilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ShanghaisilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//BF ARRAY
	ImageIcon[] BFicons = {
			LSilog, TSilog, ToSilog, SSilog, DSilog, CSilog, BSilog, CoSilog, HSilog, ShSilog
		};

	ImageIcon[] selectedBFicons = {
		    LSilogCheck, TSilogCheck, ToSilogCheck, SSilogCheck, DSilogCheck, CSilogCheck,BSilogCheck, CoSilogCheck, HSilogCheck, ShSilogCheck
		};
	
	//MAIN DISHES IMAGES
	ImageIcon Sinigang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sinigang.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SinigangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SinigangCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kare = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Kare.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KareCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/KareCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Sisig = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sisig.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SisigCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SisigCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Adobo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Adobo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon AdoboCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/AdoboCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Chicken = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Chicken.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ChickenCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/ChickenCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Inihaw = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Inihaw.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon InihawCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/InihawCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Crispy = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Pata.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CrispyCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/PataCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Nilagang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Nilaga.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon NilagangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/NilagaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Tinola = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Tinola.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TinolaCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/TinolaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Bulalo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Bulalo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BulaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/BulaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//MAIN ARRAY
	ImageIcon[] Micons = {
			Sinigang, Kare, Sisig, Adobo, Chicken, Inihaw, Crispy, Nilagang, Tinola, Bulalo
		};

	ImageIcon[] selectedMicons = {
			SinigangCheck, KareCheck, SisigCheck, AdoboCheck, ChickenCheck, InihawCheck, CrispyCheck, NilagangCheck, TinolaCheck, BulaloCheck
		};
	
	//DESSERT IMAGES
	ImageIcon Bumbong = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Bumbong.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BumbongCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/BumbongCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mais = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mais.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MaisCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MaisCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Leche = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Leche.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LecheCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/LecheCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Halo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Halo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/HaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Puto = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Puto.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PutoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PutoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Fruit = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Fruit.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon FruitCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/FruitCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mango = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mango.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MangoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MangoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kalamay = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Kalamay.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KalamayCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/KalamayCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Ice = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Ice.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon IceCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/IceCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Pandan = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Pandan.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PandanCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PandanCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//DESSERT ARRAY
	ImageIcon[] Dicons = {
			Bumbong, Mais, Leche, Halo, Puto, Fruit, Mango, Kalamay, Ice, Pandan
		};

	ImageIcon[] selectedDicons = {
			BumbongCheck, MaisCheck, LecheCheck, HaloCheck, PutoCheck, FruitCheck, MangoCheck, KalamayCheck, IceCheck, PandanCheck
		};
	
	//TOOLKITS
	Toolkit ToolK = getToolkit();
	Dimension Size = ToolK.getScreenSize();
	
	//DINE IN OR TAKE OUT FROM OTHER CLASS
	String DT;
	
	//INITIALIZE 
	DefaultListModel<String> ListModel = new DefaultListModel();
	JList<String> List = new JList<String>(ListModel);
	JScrollPane ScrollPane = new JScrollPane(List);
	
	JPanel BFPanel = new JPanel();
	JPanel MainPanel = new JPanel();
	JPanel DPanel = new JPanel();
	JPanel BuyPanel = new JPanel();
	
	JLabel 
			Title = new JLabel(), Order = new JLabel(), 
			DownBar = new JLabel(), SelectedUp = new JLabel(), SelectedDown = new JLabel(), 
			Info = new JLabel(), DiscountTxT = new JLabel(), TotalTxT = new JLabel(), DiscountedTxT = new JLabel(), PaymentTxT = new JLabel(), ChangeTxT = new JLabel(); 
	
	JTextField 
			ItemSelect = new JTextField(), Price = new JTextField(), 
			Total = new JTextField(), Discount = new JTextField(), Payment = new JTextField(), Change = new JTextField();
	
	JButton BackButt, BFButt, MainButt, DessertButt, BuyButt, HelpButt, 
			Confirm = new JButton(), Cancel = new JButton();
	
	JRadioButton None = new JRadioButton(), Student = new JRadioButton(), Senior = new JRadioButton();
	ButtonGroup ButtGroup = new ButtonGroup();
	
	//ARRAYS FOR LOOPS
	JButton[] SideButt = {
				BackButt = new JButton(), BFButt = new JButton(), 
				MainButt = new JButton(), DessertButt = new JButton(), 
				BuyButt = new JButton(), HelpButt = new JButton()
			};
	
	JCheckBox[] BFDish = new JCheckBox[10];
	JCheckBox[] MDish = new JCheckBox[10];
	JCheckBox[] DDish = new JCheckBox[10];
	
	//ARRAYS FOR LOOPS BUT FOR SET TEXTS
	String[] BF = {
				"<html>Longsilog <br>P80.00</html>", "<html>Tapsilog <br>P90.00</html>", "<html>Tocilog <br>P70.00</html>", 
				"<html>Spamsilog <br>P80.00</html>", "<html>Daingsilog <br>P90.00</html>", "<html>Chicksilog <br>P90.00</html>", 
				"<html>Bangsilog <br>P90.00</html>", "<html>Cornsilog <br>P80.00</html>", "<html>Hotsilog <br>P70.00</html>", 
				"<html>Shanghaisilog <br>P70.00</html>"
			};
	
	String[] M = {
				"<html>Sinigang na Bangus<br>P170.00</html>", "<html>Kare-Kare<br>P200.00</html>", "<html>Sisig<br>P170.00</html>", "<html>Pork Adobo<br>P200.00</html>", 
				"<html>Chicken Inasal<br>P120.00</html>", "<html>Inihaw na Liempo<br>P100.00</html>", "<html>Crispy Pata<br>P250.00</html>", 
				"<html>Beef Nilaga<br>P150.00</html>", "<html>Tinola<br>P150.00</html>", "<html>Bulalo<br>P200.00</html>"
			};
	
	String[] D = {
				"<html>Puto Bumbong<br>P50.00</html>", "<html>Mais Con Yelo<br>P100.00</html>", "<html>Leche Flan<br>P90.00</html>", 
				"<html>Halo-Halo<br>P70.00</html>", "<html>Puto<br>P60.00</html>", "<html>Fruit Salad<br>P50.00</html>", 
				"<html>Mango Graham Cake<br>P100.00</html>", "<html>Kalamay<br>P100.00</html>", 
				"<html>Ice Cream<br>P90.00</html>", "<html>Buko Pandan<br>P90.00</html>"
			};
	
	String[] BFShow = {
			"Longsilog","Tapsilog","Tocilog",
			"Spamsilog","Daingsilog","Chicksilog",
			"Bangsilog","Cornsilog","Hotsilog",
			"Shanghaisilog"
	};
	
	Double[] BFCalc = {
			80.00, 90.00, 70.00, 
			80.00, 90.00, 90.00,
			90.00, 80.00, 70.00,
			70.00
	};
	
	String[] MShow = {
			"Sinigang na Bangus","Kare-Kare", "Sisig", "Pork Adobo", 
			"Chicken Inasal", "Inihaw na Liempo", "Crispy Pata", 
			"Beef Nilaga", "Tinola", "Bulalo"
		};
	
	Double[] MCalc = {
			170.00, 200.00, 170.00, 200.00, 
			120.00, 100.00, 250.00,
			150.00, 150.00, 200.00
	};
	
	String[] DShow = {
			"Puto Bumbong", "Mais Con Yelo", "Leche Flan", 
			"Halo-Halo", "Puto", "Fruit Salad", 
			"Mango Graham Cake", "Kalamay", 
			"Ice Cream", "Buko Pandan"
		};
	
	Double[] DCalc = {
			50.00, 100.00, 90.00, 
			70.00, 60.00, 500.00, 
			100.00, 100.00, 
			90.00, 90.00
	};
	
	//PROCESS
	double TotalPrice = 0.00, BFnum = 0.00, Mnum = 0.00, Dnum = 0.00, DiscountPrice = 0.00;
	
	void FOS_Frame_Design(){
		JLabel BG = new JLabel(new ImageIcon(new ImageIcon("Images/Templates/Template_2.png").getImage().getScaledInstance(500, 600, Image.SCALE_SMOOTH)));
		setSize(BG.getPreferredSize());
		getContentPane().add(BG);
		BG.setBounds(0, 0, getWidth(), getHeight());
		
		setLocation(Size.width/2 - getWidth()/2, Size.height/2 - getHeight()/2);
		getContentPane().setBackground(Color.decode("#F5F5DC"));
		setResizable(false);
		setTitle("Food Ordering System");
		setIconImage(Logo.getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//COMPONENTS
		Title.setText("Breakfast");
		Title.setBounds(175, 85, 250, 40);
		Title.setFont(new Font("Georgia", Font.BOLD, 40));
		Title.setForeground(Color.black);
		Title.setBorder(null);
		Title.setFocusable(false);
		Title.setOpaque(false);
		
		//TOOLTIP EDITS
		UIManager.put("ToolTip.background", Color.white);
		UIManager.put("ToolTip.foreground", Color.black);
		UIManager.put("ToolTip.border", BorderFactory.createLineBorder(Color.black, 1));
		UIManager.put("ToolTip.font", new Font("Arial", Font.BOLD, 20));
	    int initialDelay = ToolTipManager.sharedInstance().getInitialDelay();
	    ToolTipManager.sharedInstance().setInitialDelay(10);
	    
	    //SIDE BUTTONS
	    int y = 75;
	    for (int i = 0; i < SideButt.length; i++) {
	        int index = i; // Final Variable for mouselistener
	        SideButt[index].setBounds(0, y, 69, 70);
	        y += 70;
	        SideButt[index].setBorder(null);
	        SideButt[index].setOpaque(true);
	        SideButt[index].setFocusable(false);
	        SideButt[index].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	        SideButt[index].addActionListener(this);
	        
	        if (index == 0) {
		        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        } else if (index >= 1 && index <= SideButt.length-1){
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
	    			public void mouseEntered(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#4b3a2f"))) {
	    		    		SideButt[index].setBackground(Color.decode("#695141"));
	    		    	}
	    		    }
	    		    public void mouseExited(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#695141"))) {
	    		    		SideButt[index].setBackground(Color.decode("#4b3a2f"));
	    		    	}
	    		    }
	    		});
	        } else {
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        }
	        add(SideButt[index]);
	    }
	    
		BackButt.setIcon(Back);
		BackButt.setBackground(Color.decode("#4b3a2f"));
		BackButt.setToolTipText("Back");
		
		BFButt.setIcon(BFImg);
		BFButt.setBackground(Color.decode("#695142"));
		BFButt.setToolTipText("Breakfast");
		
		MainButt.setIcon(MainImg);	
		MainButt.setBackground(Color.decode("#4b3a2f"));
		MainButt.setToolTipText("Main Courses");
		
		DessertButt.setIcon(DessertImg);
		DessertButt.setBackground(Color.decode("#4b3a2f"));
		DessertButt.setToolTipText("Desserts");

		BuyButt.setIcon(BuyImg);
		BuyButt.setBackground(Color.decode("#4b3a2f"));
		BuyButt.setToolTipText("Checkout");
		
		HelpButt.setIcon(HelpImg);
		HelpButt.setBackground(Color.decode("#4b3a2f"));
		HelpButt.setToolTipText("Help");
		
		BFPanel.setBounds(85, 150, 380, 400);
		BFPanel.setLayout(new GridLayout(5,5));
		
		MainPanel.setBounds(85, 150, 380, 400);
		MainPanel.setLayout(new GridLayout(5,5));
		MainPanel.setVisible(false);

		DPanel.setBounds(85, 150, 380, 400);
		DPanel.setLayout(new GridLayout(5,5));
		DPanel.setVisible(false);
		
		BuyPanel.setBounds(85, 180, 140, 300);
		BuyPanel.setVisible(false);
		BuyPanel.setLayout(new BorderLayout());
		
		ScrollPane.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		BuyPanel.add(ScrollPane);
		
		List.setFont(new Font("Arial", Font.BOLD, 12));
		List.setBackground(Color.white);
		List.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    int index = List.locationToIndex(e.getPoint());
                    String selectedValue = List.getModel().getElementAt(index);
                    ItemSelect.setText(selectedValue);
                    ItemSelect.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    Price.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    
                    
                    //ARRAY CHECKER AND INDEX GETTER
                    int BFIndex = -1, MIndex = -1, DIndex = -1;

                    for (int i = 0; i < BFShow.length; i++) {
                      if (BFShow[i].equals(selectedValue)) {
                    	  BFIndex = i;
                        break;
                      } else if (MShow[i].equals(selectedValue)) {
                    	  MIndex = i;
                          break;
                        } else if (DShow[i].equals(selectedValue)) {
                    	  DIndex = i;
                          break;
                        }
                    }
                    
                    //PRICE SETTER
                    if (BFIndex != -1) {
                    	  Price.setText("P" + String.format("%.2f", BFCalc[BFIndex]));
                    	}  else if (MIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", MCalc[MIndex]));
                      	} else if (DIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", DCalc[DIndex]));
                      	} 
                }
            }
        });
		
		for (int i = 0; i < BFDish.length; i++) {
			BFDish[i] = new JCheckBox(BF[i]);
			BFDish[i].setBackground(Color.decode("#e8ccb4"));
			BFDish[i].setFocusable(false);
			BFDish[i].setOpaque(true);
			BFDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			BFDish[i].addActionListener(this);
			BFDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			BFPanel.add(BFDish[i]);
			
			MDish[i] = new JCheckBox(M[i]);
			MDish[i].setBackground(Color.decode("#e8ccb4"));
			MDish[i].setFocusable(false);
			MDish[i].setOpaque(true);
			MDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			MDish[i].addActionListener(this);
			MDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			MainPanel.add(MDish[i]);
			
			DDish[i] = new JCheckBox(D[i]);
			DDish[i].setBackground(Color.decode("#e8ccb4"));
			DDish[i].setFocusable(false);
			DDish[i].setOpaque(true);
			DDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			DDish[i].addActionListener(this);
			DDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			DPanel.add(DDish[i]);
		}
		
		//BUY PANEL DESIGN
		for (int i = 0; i < BFicons.length; i++) {
		    BFDish[i].setIcon(BFicons[i]);
		    BFDish[i].setSelectedIcon(selectedBFicons[i]);
		    
		    MDish[i].setIcon(Micons[i]);
		    MDish[i].setSelectedIcon(selectedMicons[i]);
		    
		    DDish[i].setIcon(Dicons[i]);
		    DDish[i].setSelectedIcon(selectedDicons[i]);
		}
		
		//TEXT
		Order.setText("Order Details");
		Order.setBounds(92, 143, 250, 40);
		Order.setFont(new Font("Georgia", Font.BOLD, 18));
		Order.setForeground(Color.black);
		Order.setBorder(null);
		Order.setFocusable(false);
		Order.setOpaque(false);
		Order.setVisible(false);
		
		Info.setText("Billing details");
		Info.setBounds(280, 143, 250, 40);
		Info.setFont(new Font("Georgia", Font.BOLD, 18));
		Info.setForeground(Color.black);
		Info.setBorder(null);
		Info.setOpaque(false);
		Info.setVisible(false);
		
		//RIGHT SIDE
		SelectedUp.setBounds(235, 180, 230, 90);
		SelectedUp.setBackground(Color.white);
		SelectedUp.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedUp.setOpaque(true);
		SelectedUp.setVisible(false);
		
		ItemSelect.setText("Select an Item from your list");
		ItemSelect.setFont(new Font("Arial", Font.ITALIC, 14));
		ItemSelect.setForeground(Color.black);
		ItemSelect.setBounds(10, 10, 210, 30);
		ItemSelect.setBackground(Color.white);
		ItemSelect.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		ItemSelect.setOpaque(true);
		ItemSelect.setEditable(false);
		
		Price.setText("Item Price");
		Price.setBounds(10, 50, 210, 30);
		Price.setFont(new Font("Arial", Font.ITALIC, 14));
		Price.setForeground(Color.black);
		Price.setBackground(Color.white);
		Price.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Price.setOpaque(true);
		Price.setEditable(false);
		
		SelectedDown.setBounds(235, 280, 230, 200);
		SelectedDown.setBackground(Color.white);
		SelectedDown.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedDown.setOpaque(true);
		SelectedDown.setVisible(false);
		
		DiscountTxT.setText("Discounts");
		DiscountTxT.setBounds(5, 5, 250, 15);
		DiscountTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountTxT.setForeground(Color.black);
		DiscountTxT.setBorder(null);
		DiscountTxT.setOpaque(false);
		
		None.setText("None");
		None.setSelected(true);
		None.setBounds(10, 25, 70, 15);
		None.setFocusable(false);
		None.setOpaque(false);
		None.setFont(new Font("Arial", Font.PLAIN, 12));
		None.addActionListener(this);
		
		Student.setText("Student (3%)");
		Student.setSelected(true);
		Student.setBounds(70, 25, 100, 15);
		Student.setFocusable(false);
		Student.setOpaque(false);
		Student.setFont(new Font("Arial", Font.PLAIN, 12));
		Student.addActionListener(this);
		
		Senior.setText("Senior (20%)");
		Senior.setSelected(true);
		Senior.setBounds(10, 45, 100, 15);
		Senior.setFocusable(false);
		Senior.setOpaque(false);
		Senior.setFont(new Font("Arial", Font.PLAIN, 12));
		Senior.addActionListener(this);
		
		ButtGroup.add(None);
		ButtGroup.add(Student);
		ButtGroup.add(Senior);
		
		TotalTxT.setText("Total: ");
		TotalTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		TotalTxT.setBounds(5, 70, 90, 20);
		TotalTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		TotalTxT.setForeground(Color.black);
		TotalTxT.setBorder(null);
		TotalTxT.setOpaque(false);
		
		Total.setHorizontalAlignment(SwingConstants.RIGHT);
		Total.setFont(new Font("Arial", Font.PLAIN, 14));
		Total.setForeground(Color.black);
		Total.setBounds(100, 73, 120, 20);
		Total.setBackground(Color.white);
		Total.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Total.setOpaque(true);
		Total.setEditable(false);
		
		DiscountedTxT.setText("Discounted: ");
		DiscountedTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		DiscountedTxT.setBounds(5, 100, 90, 20);
		DiscountedTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountedTxT.setForeground(Color.black);
		DiscountedTxT.setBorder(null);
		DiscountedTxT.setOpaque(false);
		
		Discount.setText("P 0.00");
		Discount.setHorizontalAlignment(SwingConstants.RIGHT);
		Discount.setFont(new Font("Arial", Font.PLAIN, 14));
		Discount.setForeground(Color.black);
		Discount.setBounds(100, 103, 120, 20);
		Discount.setBackground(Color.white);
		Discount.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Discount.setOpaque(true);
		Discount.setEditable(false);
		
		PaymentTxT.setText("Payment: ");
		PaymentTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		PaymentTxT.setBounds(5, 130, 90, 20);
		PaymentTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		PaymentTxT.setForeground(Color.black);
		PaymentTxT.setBorder(null);
		PaymentTxT.setOpaque(false);
		
		Payment.setText("Enter amount");
		Payment.setHorizontalAlignment(SwingConstants.RIGHT);
		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		Payment.setForeground(Color.decode("#474747"));
		Payment.setBounds(100, 133, 120, 20);
		Payment.setBackground(Color.white);
		Payment.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Payment.setOpaque(true);
		Payment.setEditable(false);
		Payment.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().isEmpty()) {
		    		Payment.setText("Enter amount");
		    		Payment.setForeground(Color.decode("#474747"));
		    		Payment.setEditable(false);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		    public void mouseReleased(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().equals("Enter amount")) {
		    		Payment.setText("");
		    		Payment.setForeground(Color.BLACK);
		    		Payment.setEditable(true);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		});
		
		Payment.addKeyListener(new java.awt.event.KeyAdapter() {
		    public void keyPressed(java.awt.event.KeyEvent e) {
		    if (e.getKeyCode() == KeyEvent.VK_ENTER ) {
		    	
		     } 
		   }
		});
		
		ChangeTxT.setText("Change: ");
		ChangeTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		ChangeTxT.setBounds(5, 160, 90, 20);
		ChangeTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		ChangeTxT.setForeground(Color.black);
		ChangeTxT.setBorder(null);
		ChangeTxT.setOpaque(false);
		
		Change.setHorizontalAlignment(SwingConstants.RIGHT);
		Change.setFont(new Font("Arial", Font.PLAIN, 14));
		Change.setForeground(Color.black);
		Change.setBounds(100, 163, 120, 20);
		Change.setBackground(Color.white);
		Change.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Change.setOpaque(true);
		Change.setEditable(false);
		
		//CONFIRM
		DownBar.setBounds(0, 495, 500, 100);
		DownBar.setBackground(Color.decode("#4b3a2f"));
		DownBar.setBorder(null);
		DownBar.setOpaque(true);
		DownBar.setVisible(false);
		
		Cancel.setText("Cancel");
		Cancel.setBounds(85, 15, 140, 35);
		Cancel.setFont(new Font("Helvetica", Font.BOLD, 16));
		Cancel.setForeground(Color.black);
		Cancel.setBackground(Color.decode("#f5b8b8"));
		Cancel.setOpaque(true);
		Cancel.setBorder(null);
		Cancel.setFocusable(false);
		Cancel.addActionListener(this);
		Cancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f72525"));
		    	Cancel.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f5b8b8"));
		    	Cancel.setForeground(Color.black);
		    }
		});
		
		Confirm.setText("Confirm");
		Confirm.setBounds(280, 15, 140, 35);
		Confirm.setFont(new Font("Helvetica", Font.BOLD, 16));
		Confirm.setForeground(Color.black);
		Confirm.setBackground(Color.decode("#bbf5b8"));
		Confirm.setOpaque(true);
		Confirm.setBorder(null);
		Confirm.setFocusable(false);
		Confirm.addActionListener(this);
		Confirm.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Confirm.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#02bf34"));
		    	Confirm.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#bbf5b8"));
		    	Confirm.setForeground(Color.black);
		    }
		});
		
		//ADD
		add(Title);
		add(Order);
		add(Info);
		add(SelectedUp);
		SelectedUp.add(ItemSelect);
		SelectedUp.add(Price);
		
		add(SelectedDown);
		SelectedDown.add(TotalTxT);
		SelectedDown.add(DiscountTxT);
		SelectedDown.add(DiscountedTxT);
		SelectedDown.add(PaymentTxT);
		SelectedDown.add(ChangeTxT);
		SelectedDown.add(Total);
		SelectedDown.add(Discount);
		SelectedDown.add(Payment);
		SelectedDown.add(Change);
		SelectedDown.add(None);
		SelectedDown.add(Senior);
		SelectedDown.add(Student);
		
		add(DownBar);
		DownBar.add(Confirm);
		DownBar.add(Cancel);
		
		add(BFPanel);
		add(MainPanel);
		add(DPanel);
		add(BuyPanel);
		
		getContentPane().setComponentZOrder(Title, 0);
		getContentPane().setComponentZOrder(BFPanel, 0);
		getContentPane().setComponentZOrder(MainPanel, 0);
		getContentPane().setComponentZOrder(DPanel, 0);
		getContentPane().setComponentZOrder(BuyPanel, 0);
		getContentPane().setComponentZOrder(Order, 0);
		getContentPane().setComponentZOrder(Info, 0);
		getContentPane().setComponentZOrder(SelectedDown, 0);
		getContentPane().setComponentZOrder(SelectedUp, 0);
		getContentPane().setComponentZOrder(DownBar, 0);
		for (int i = 0; i < SideButt.length; i++) {
		    getContentPane().setComponentZOrder(SideButt[i], 0);
		}
		setLayout(null);
		setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		for(int i = 0; i < BFDish.length;i++ ) {
    		if(e.getSource().equals(BFDish[i])) {
    			if(BFDish[i].isSelected()) {
        			ListModel.addElement(BFShow[i]);
    			} else {
    				ListModel.removeElement(BFShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < MDish.length;i++ ) {
    		if(e.getSource().equals(MDish[i])) {
    			if(MDish[i].isSelected()) {
        			ListModel.addElement(MShow[i]);
    			} else {
    				ListModel.removeElement(MShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < DDish.length;i++ ) {
    		if(e.getSource().equals(DDish[i])) {
    			if(DDish[i].isSelected()) {
        			ListModel.addElement(DShow[i]);
    			} else {
    				ListModel.removeElement(DShow[i]);
    			}
    		}
		}
		
		if (e.getSource() == BackButt) {
		    int Back = JOptionPane.showConfirmDialog(this, "Go back and discard order?", "Back", JOptionPane.YES_NO_OPTION);
		    if (Back == JOptionPane.YES_OPTION) {
		        FOS_Dine_Take Fos = new FOS_Dine_Take();
		        Fos.FOS_Dine_Take_Design();
		        dispose();
		    }
		}
		
		//PROCESS
		
	    if (e.getSource() == BFButt) {
	   
	        Title.setText("Breakfast");
	        BFButt.setBackground(Color.decode("#695142"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(true);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == MainButt) {
	    	
	        Title.setText("Main Course");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#695142"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(140, 85, 280, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(true);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedDown.setVisible(false);
	        SelectedUp.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == DessertButt) {
	    	
	        Title.setText("Desserts");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#695142"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(true);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == BuyButt) {
	    	
	        Title.setText("Checkout");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#695142"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(true);
	        Order.setVisible(true);
	        Info.setVisible(true);
	        SelectedUp.setVisible(true);
	        SelectedDown.setVisible(true);
	        DownBar.setVisible(true);
	        
	        //PROCESS
	        
	      //------------------------------------------------------------------
	        
	        int size = ListModel.getSize();
	        
	        if (size == 0) {
	        	Total.setText("P 0.00");
	        } else {
	        	for (int i = 0; i < size; i++) {
	  			  String element = ListModel.getElementAt(i);
	  			  
	  					//ARRAY CHECKER AND INDEX GETTER
	  		             int BFIndex = -1, MIndex = -1, DIndex = -1;
	  		
	  		             for (int x = 0; x < BFShow.length; x++) {
	  		               if (BFShow[x].equals(element)) {
	  		             	  BFIndex = x;
	  		                 break;
	  		               } else if (MShow[x].equals(element)) {
	  		             	  MIndex = x;
	  		                   break;
	  		                 } else if (DShow[x].equals(element)) {
	  		             	  DIndex = x;
	  		                   break;
	  		                 }
	  		             }
	               
	  		           //PRICE SETTER
	  		             if (BFIndex != -1) {
	  		            	 	BFnum += BFCalc[BFIndex];
	  		             	}  else if (MIndex != -1) {
	  		             		Mnum += MCalc[MIndex];
	  		               	} else if (DIndex != -1) {
	  		               		Dnum += DCalc[DIndex];
	  		               	} 
	  		             
	  		             TotalPrice = BFnum + Mnum + Dnum;
	  		             Total.setText("P " + String.format("%.2f", TotalPrice));
	  			}
	        }
	      //------------------------------------------------------------------
	    } else if (e.getSource() == HelpButt) {
	    	JOptionPane.showMessageDialog(null, "<html>To select the item(s) you want to order, simply <u>tap or click</u> on the area near the food you have chosen.<br> Once selected, a check mark will appear next to the item to indicate that it has been chosen.</html>", "How to use!", JOptionPane.INFORMATION_MESSAGE);	    	
	    }
	    
	  //------------------------------------------------------------------
	    if (e.getSource() == None || e.getSource() == Student || e.getSource() == Senior) {
			if(None.isSelected() == true) {
				Discount.setText("P 0.00");
			} else if(Student.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.03;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			} else if(Senior.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.2;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			}
		}
	  //------------------------------------------------------------------
	    
	    (TotalPrice - DiscountPrice)
	    Change.setText("99");
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-21 19:01:15.938
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-21 19:01:15.941
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-21 19:01:18.411
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package foodOrderingSystem;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;

import javax.swing.*;

public class FOS_Frame extends JFrame implements ActionListener{
	//IMAGES
	ImageIcon Logo = new ImageIcon(new ImageIcon("Images/Logo-FOS.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
	ImageIcon Back = new ImageIcon(new ImageIcon("Images/SideLogos/Back.png").getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
	ImageIcon BFImg = new ImageIcon(new ImageIcon("Images/SideLogos/BF.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MainImg = new ImageIcon(new ImageIcon("Images/SideLogos/Main.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DessertImg = new ImageIcon(new ImageIcon("Images/SideLogos/Dessert.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BuyImg = new ImageIcon(new ImageIcon("Images/SideLogos/Buy.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HelpImg = new ImageIcon(new ImageIcon("Images/SideLogos/help.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//Breakfast
	ImageIcon LSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Longsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/LongsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tapsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TapsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Tocilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ToSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/TocilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Spamsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/SpamsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Daingsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon DSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/DaingsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Chicksilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ChicksilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Bangsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/BangsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Cornsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CoSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/CornsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Hotsilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/HotsilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilog = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/Shanghaisilog.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ShSilogCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/BreakfastImages/ShanghaisilogCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//BF ARRAY
	ImageIcon[] BFicons = {
			LSilog, TSilog, ToSilog, SSilog, DSilog, CSilog, BSilog, CoSilog, HSilog, ShSilog
		};

	ImageIcon[] selectedBFicons = {
		    LSilogCheck, TSilogCheck, ToSilogCheck, SSilogCheck, DSilogCheck, CSilogCheck,BSilogCheck, CoSilogCheck, HSilogCheck, ShSilogCheck
		};
	
	//MAIN DISHES IMAGES
	ImageIcon Sinigang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sinigang.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SinigangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SinigangCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kare = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Kare.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KareCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/KareCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Sisig = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Sisig.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon SisigCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/SisigCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Adobo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Adobo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon AdoboCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/AdoboCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Chicken = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Chicken.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon ChickenCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/ChickenCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Inihaw = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Inihaw.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon InihawCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/InihawCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Crispy = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Pata.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon CrispyCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/PataCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Nilagang = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Nilaga.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon NilagangCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/NilagaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Tinola = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Tinola.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon TinolaCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/TinolaCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Bulalo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/Bulalo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BulaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/MainImages/BulaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//MAIN ARRAY
	ImageIcon[] Micons = {
			Sinigang, Kare, Sisig, Adobo, Chicken, Inihaw, Crispy, Nilagang, Tinola, Bulalo
		};

	ImageIcon[] selectedMicons = {
			SinigangCheck, KareCheck, SisigCheck, AdoboCheck, ChickenCheck, InihawCheck, CrispyCheck, NilagangCheck, TinolaCheck, BulaloCheck
		};
	
	//DESSERT IMAGES
	ImageIcon Bumbong = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Bumbong.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon BumbongCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/BumbongCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mais = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mais.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MaisCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MaisCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Leche = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Leche.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon LecheCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/LecheCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Halo = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Halo.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon HaloCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/HaloCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Puto = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Puto.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PutoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PutoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Fruit = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Fruit.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon FruitCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/FruitCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Mango = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Mango.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon MangoCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/MangoCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Kalamay = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Kalamay.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon KalamayCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/KalamayCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Ice = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Ice.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon IceCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/IceCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon Pandan = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/Pandan.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	ImageIcon PandanCheck = new ImageIcon(new ImageIcon("Images/FrameDesignImages/DessertImages/PandanCheck.png").getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
	
	//DESSERT ARRAY
	ImageIcon[] Dicons = {
			Bumbong, Mais, Leche, Halo, Puto, Fruit, Mango, Kalamay, Ice, Pandan
		};

	ImageIcon[] selectedDicons = {
			BumbongCheck, MaisCheck, LecheCheck, HaloCheck, PutoCheck, FruitCheck, MangoCheck, KalamayCheck, IceCheck, PandanCheck
		};
	
	//TOOLKITS
	Toolkit ToolK = getToolkit();
	Dimension Size = ToolK.getScreenSize();
	
	//DINE IN OR TAKE OUT FROM OTHER CLASS
	String DT;
	
	//INITIALIZE 
	DefaultListModel<String> ListModel = new DefaultListModel();
	JList<String> List = new JList<String>(ListModel);
	JScrollPane ScrollPane = new JScrollPane(List);
	
	JPanel BFPanel = new JPanel();
	JPanel MainPanel = new JPanel();
	JPanel DPanel = new JPanel();
	JPanel BuyPanel = new JPanel();
	
	JLabel 
			Title = new JLabel(), Order = new JLabel(), 
			DownBar = new JLabel(), SelectedUp = new JLabel(), SelectedDown = new JLabel(), 
			Info = new JLabel(), DiscountTxT = new JLabel(), TotalTxT = new JLabel(), DiscountedTxT = new JLabel(), PaymentTxT = new JLabel(), ChangeTxT = new JLabel(); 
	
	JTextField 
			ItemSelect = new JTextField(), Price = new JTextField(), 
			Total = new JTextField(), Discount = new JTextField(), Payment = new JTextField(), Change = new JTextField();
	
	JButton BackButt, BFButt, MainButt, DessertButt, BuyButt, HelpButt, 
			Confirm = new JButton(), Cancel = new JButton();
	
	JRadioButton None = new JRadioButton(), Student = new JRadioButton(), Senior = new JRadioButton();
	ButtonGroup ButtGroup = new ButtonGroup();
	
	//ARRAYS FOR LOOPS
	JButton[] SideButt = {
				BackButt = new JButton(), BFButt = new JButton(), 
				MainButt = new JButton(), DessertButt = new JButton(), 
				BuyButt = new JButton(), HelpButt = new JButton()
			};
	
	JCheckBox[] BFDish = new JCheckBox[10];
	JCheckBox[] MDish = new JCheckBox[10];
	JCheckBox[] DDish = new JCheckBox[10];
	
	//ARRAYS FOR LOOPS BUT FOR SET TEXTS
	String[] BF = {
				"<html>Longsilog <br>P80.00</html>", "<html>Tapsilog <br>P90.00</html>", "<html>Tocilog <br>P70.00</html>", 
				"<html>Spamsilog <br>P80.00</html>", "<html>Daingsilog <br>P90.00</html>", "<html>Chicksilog <br>P90.00</html>", 
				"<html>Bangsilog <br>P90.00</html>", "<html>Cornsilog <br>P80.00</html>", "<html>Hotsilog <br>P70.00</html>", 
				"<html>Shanghaisilog <br>P70.00</html>"
			};
	
	String[] M = {
				"<html>Sinigang na Bangus<br>P170.00</html>", "<html>Kare-Kare<br>P200.00</html>", "<html>Sisig<br>P170.00</html>", "<html>Pork Adobo<br>P200.00</html>", 
				"<html>Chicken Inasal<br>P120.00</html>", "<html>Inihaw na Liempo<br>P100.00</html>", "<html>Crispy Pata<br>P250.00</html>", 
				"<html>Beef Nilaga<br>P150.00</html>", "<html>Tinola<br>P150.00</html>", "<html>Bulalo<br>P200.00</html>"
			};
	
	String[] D = {
				"<html>Puto Bumbong<br>P50.00</html>", "<html>Mais Con Yelo<br>P100.00</html>", "<html>Leche Flan<br>P90.00</html>", 
				"<html>Halo-Halo<br>P70.00</html>", "<html>Puto<br>P60.00</html>", "<html>Fruit Salad<br>P50.00</html>", 
				"<html>Mango Graham Cake<br>P100.00</html>", "<html>Kalamay<br>P100.00</html>", 
				"<html>Ice Cream<br>P90.00</html>", "<html>Buko Pandan<br>P90.00</html>"
			};
	
	String[] BFShow = {
			"Longsilog","Tapsilog","Tocilog",
			"Spamsilog","Daingsilog","Chicksilog",
			"Bangsilog","Cornsilog","Hotsilog",
			"Shanghaisilog"
	};
	
	Double[] BFCalc = {
			80.00, 90.00, 70.00, 
			80.00, 90.00, 90.00,
			90.00, 80.00, 70.00,
			70.00
	};
	
	String[] MShow = {
			"Sinigang na Bangus","Kare-Kare", "Sisig", "Pork Adobo", 
			"Chicken Inasal", "Inihaw na Liempo", "Crispy Pata", 
			"Beef Nilaga", "Tinola", "Bulalo"
		};
	
	Double[] MCalc = {
			170.00, 200.00, 170.00, 200.00, 
			120.00, 100.00, 250.00,
			150.00, 150.00, 200.00
	};
	
	String[] DShow = {
			"Puto Bumbong", "Mais Con Yelo", "Leche Flan", 
			"Halo-Halo", "Puto", "Fruit Salad", 
			"Mango Graham Cake", "Kalamay", 
			"Ice Cream", "Buko Pandan"
		};
	
	Double[] DCalc = {
			50.00, 100.00, 90.00, 
			70.00, 60.00, 500.00, 
			100.00, 100.00, 
			90.00, 90.00
	};
	
	//PROCESS
	double TotalPrice = 0.00, BFnum = 0.00, Mnum = 0.00, Dnum = 0.00, DiscountPrice = 0.00;
	
	void FOS_Frame_Design(){
		JLabel BG = new JLabel(new ImageIcon(new ImageIcon("Images/Templates/Template_2.png").getImage().getScaledInstance(500, 600, Image.SCALE_SMOOTH)));
		setSize(BG.getPreferredSize());
		getContentPane().add(BG);
		BG.setBounds(0, 0, getWidth(), getHeight());
		
		setLocation(Size.width/2 - getWidth()/2, Size.height/2 - getHeight()/2);
		getContentPane().setBackground(Color.decode("#F5F5DC"));
		setResizable(false);
		setTitle("Food Ordering System");
		setIconImage(Logo.getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//COMPONENTS
		Title.setText("Breakfast");
		Title.setBounds(175, 85, 250, 40);
		Title.setFont(new Font("Georgia", Font.BOLD, 40));
		Title.setForeground(Color.black);
		Title.setBorder(null);
		Title.setFocusable(false);
		Title.setOpaque(false);
		
		//TOOLTIP EDITS
		UIManager.put("ToolTip.background", Color.white);
		UIManager.put("ToolTip.foreground", Color.black);
		UIManager.put("ToolTip.border", BorderFactory.createLineBorder(Color.black, 1));
		UIManager.put("ToolTip.font", new Font("Arial", Font.BOLD, 20));
	    int initialDelay = ToolTipManager.sharedInstance().getInitialDelay();
	    ToolTipManager.sharedInstance().setInitialDelay(10);
	    
	    //SIDE BUTTONS
	    int y = 75;
	    for (int i = 0; i < SideButt.length; i++) {
	        int index = i; // Final Variable for mouselistener
	        SideButt[index].setBounds(0, y, 69, 70);
	        y += 70;
	        SideButt[index].setBorder(null);
	        SideButt[index].setOpaque(true);
	        SideButt[index].setFocusable(false);
	        SideButt[index].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	        SideButt[index].addActionListener(this);
	        
	        if (index == 0) {
		        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        } else if (index >= 1 && index <= SideButt.length-1){
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
	    			public void mouseEntered(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#4b3a2f"))) {
	    		    		SideButt[index].setBackground(Color.decode("#695141"));
	    		    	}
	    		    }
	    		    public void mouseExited(java.awt.event.MouseEvent evt) {
	    		    	if (SideButt[index].getBackground().equals(Color.decode("#695141"))) {
	    		    		SideButt[index].setBackground(Color.decode("#4b3a2f"));
	    		    	}
	    		    }
	    		});
	        } else {
	        	SideButt[index].addMouseListener(new java.awt.event.MouseAdapter() {
		            public void mouseEntered(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#695141"));
		            }
		            public void mouseExited(java.awt.event.MouseEvent evt) {
		                SideButt[index].setBackground(Color.decode("#4b3a2f"));
		            }
	        	});
	        }
	        add(SideButt[index]);
	    }
	    
		BackButt.setIcon(Back);
		BackButt.setBackground(Color.decode("#4b3a2f"));
		BackButt.setToolTipText("Back");
		
		BFButt.setIcon(BFImg);
		BFButt.setBackground(Color.decode("#695142"));
		BFButt.setToolTipText("Breakfast");
		
		MainButt.setIcon(MainImg);	
		MainButt.setBackground(Color.decode("#4b3a2f"));
		MainButt.setToolTipText("Main Courses");
		
		DessertButt.setIcon(DessertImg);
		DessertButt.setBackground(Color.decode("#4b3a2f"));
		DessertButt.setToolTipText("Desserts");

		BuyButt.setIcon(BuyImg);
		BuyButt.setBackground(Color.decode("#4b3a2f"));
		BuyButt.setToolTipText("Checkout");
		
		HelpButt.setIcon(HelpImg);
		HelpButt.setBackground(Color.decode("#4b3a2f"));
		HelpButt.setToolTipText("Help");
		
		BFPanel.setBounds(85, 150, 380, 400);
		BFPanel.setLayout(new GridLayout(5,5));
		
		MainPanel.setBounds(85, 150, 380, 400);
		MainPanel.setLayout(new GridLayout(5,5));
		MainPanel.setVisible(false);

		DPanel.setBounds(85, 150, 380, 400);
		DPanel.setLayout(new GridLayout(5,5));
		DPanel.setVisible(false);
		
		BuyPanel.setBounds(85, 180, 140, 300);
		BuyPanel.setVisible(false);
		BuyPanel.setLayout(new BorderLayout());
		
		ScrollPane.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		BuyPanel.add(ScrollPane);
		
		List.setFont(new Font("Arial", Font.BOLD, 12));
		List.setBackground(Color.white);
		List.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    int index = List.locationToIndex(e.getPoint());
                    String selectedValue = List.getModel().getElementAt(index);
                    ItemSelect.setText(selectedValue);
                    ItemSelect.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    Price.setFont(new Font("Helvetica", Font.PLAIN, 18));
                    
                    
                    //ARRAY CHECKER AND INDEX GETTER
                    int BFIndex = -1, MIndex = -1, DIndex = -1;

                    for (int i = 0; i < BFShow.length; i++) {
                      if (BFShow[i].equals(selectedValue)) {
                    	  BFIndex = i;
                        break;
                      } else if (MShow[i].equals(selectedValue)) {
                    	  MIndex = i;
                          break;
                        } else if (DShow[i].equals(selectedValue)) {
                    	  DIndex = i;
                          break;
                        }
                    }
                    
                    //PRICE SETTER
                    if (BFIndex != -1) {
                    	  Price.setText("P" + String.format("%.2f", BFCalc[BFIndex]));
                    	}  else if (MIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", MCalc[MIndex]));
                      	} else if (DIndex != -1) {
                      	  Price.setText("P" + String.format("%.2f", DCalc[DIndex]));
                      	} 
                }
            }
        });
		
		for (int i = 0; i < BFDish.length; i++) {
			BFDish[i] = new JCheckBox(BF[i]);
			BFDish[i].setBackground(Color.decode("#e8ccb4"));
			BFDish[i].setFocusable(false);
			BFDish[i].setOpaque(true);
			BFDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			BFDish[i].addActionListener(this);
			BFDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			BFPanel.add(BFDish[i]);
			
			MDish[i] = new JCheckBox(M[i]);
			MDish[i].setBackground(Color.decode("#e8ccb4"));
			MDish[i].setFocusable(false);
			MDish[i].setOpaque(true);
			MDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			MDish[i].addActionListener(this);
			MDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			MainPanel.add(MDish[i]);
			
			DDish[i] = new JCheckBox(D[i]);
			DDish[i].setBackground(Color.decode("#e8ccb4"));
			DDish[i].setFocusable(false);
			DDish[i].setOpaque(true);
			DDish[i].setFont(new Font("Arial", Font.BOLD, 14));
			DDish[i].addActionListener(this);
			DDish[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			DPanel.add(DDish[i]);
		}
		
		//BUY PANEL DESIGN
		for (int i = 0; i < BFicons.length; i++) {
		    BFDish[i].setIcon(BFicons[i]);
		    BFDish[i].setSelectedIcon(selectedBFicons[i]);
		    
		    MDish[i].setIcon(Micons[i]);
		    MDish[i].setSelectedIcon(selectedMicons[i]);
		    
		    DDish[i].setIcon(Dicons[i]);
		    DDish[i].setSelectedIcon(selectedDicons[i]);
		}
		
		//TEXT
		Order.setText("Order Details");
		Order.setBounds(92, 143, 250, 40);
		Order.setFont(new Font("Georgia", Font.BOLD, 18));
		Order.setForeground(Color.black);
		Order.setBorder(null);
		Order.setFocusable(false);
		Order.setOpaque(false);
		Order.setVisible(false);
		
		Info.setText("Billing details");
		Info.setBounds(280, 143, 250, 40);
		Info.setFont(new Font("Georgia", Font.BOLD, 18));
		Info.setForeground(Color.black);
		Info.setBorder(null);
		Info.setOpaque(false);
		Info.setVisible(false);
		
		//RIGHT SIDE
		SelectedUp.setBounds(235, 180, 230, 90);
		SelectedUp.setBackground(Color.white);
		SelectedUp.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedUp.setOpaque(true);
		SelectedUp.setVisible(false);
		
		ItemSelect.setText("Select an Item from your list");
		ItemSelect.setFont(new Font("Arial", Font.ITALIC, 14));
		ItemSelect.setForeground(Color.black);
		ItemSelect.setBounds(10, 10, 210, 30);
		ItemSelect.setBackground(Color.white);
		ItemSelect.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		ItemSelect.setOpaque(true);
		ItemSelect.setEditable(false);
		
		Price.setText("Item Price");
		Price.setBounds(10, 50, 210, 30);
		Price.setFont(new Font("Arial", Font.ITALIC, 14));
		Price.setForeground(Color.black);
		Price.setBackground(Color.white);
		Price.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Price.setOpaque(true);
		Price.setEditable(false);
		
		SelectedDown.setBounds(235, 280, 230, 200);
		SelectedDown.setBackground(Color.white);
		SelectedDown.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		SelectedDown.setOpaque(true);
		SelectedDown.setVisible(false);
		
		DiscountTxT.setText("Discounts");
		DiscountTxT.setBounds(5, 5, 250, 15);
		DiscountTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountTxT.setForeground(Color.black);
		DiscountTxT.setBorder(null);
		DiscountTxT.setOpaque(false);
		
		None.setText("None");
		None.setSelected(true);
		None.setBounds(10, 25, 70, 15);
		None.setFocusable(false);
		None.setOpaque(false);
		None.setFont(new Font("Arial", Font.PLAIN, 12));
		None.addActionListener(this);
		
		Student.setText("Student (3%)");
		Student.setSelected(true);
		Student.setBounds(70, 25, 100, 15);
		Student.setFocusable(false);
		Student.setOpaque(false);
		Student.setFont(new Font("Arial", Font.PLAIN, 12));
		Student.addActionListener(this);
		
		Senior.setText("Senior (20%)");
		Senior.setSelected(true);
		Senior.setBounds(10, 45, 100, 15);
		Senior.setFocusable(false);
		Senior.setOpaque(false);
		Senior.setFont(new Font("Arial", Font.PLAIN, 12));
		Senior.addActionListener(this);
		
		ButtGroup.add(None);
		ButtGroup.add(Student);
		ButtGroup.add(Senior);
		
		TotalTxT.setText("Total: ");
		TotalTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		TotalTxT.setBounds(5, 70, 90, 20);
		TotalTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		TotalTxT.setForeground(Color.black);
		TotalTxT.setBorder(null);
		TotalTxT.setOpaque(false);
		
		Total.setHorizontalAlignment(SwingConstants.RIGHT);
		Total.setFont(new Font("Arial", Font.PLAIN, 14));
		Total.setForeground(Color.black);
		Total.setBounds(100, 73, 120, 20);
		Total.setBackground(Color.white);
		Total.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Total.setOpaque(true);
		Total.setEditable(false);
		
		DiscountedTxT.setText("Discounted: ");
		DiscountedTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		DiscountedTxT.setBounds(5, 100, 90, 20);
		DiscountedTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		DiscountedTxT.setForeground(Color.black);
		DiscountedTxT.setBorder(null);
		DiscountedTxT.setOpaque(false);
		
		Discount.setText("P 0.00");
		Discount.setHorizontalAlignment(SwingConstants.RIGHT);
		Discount.setFont(new Font("Arial", Font.PLAIN, 14));
		Discount.setForeground(Color.black);
		Discount.setBounds(100, 103, 120, 20);
		Discount.setBackground(Color.white);
		Discount.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Discount.setOpaque(true);
		Discount.setEditable(false);
		
		PaymentTxT.setText("Payment: ");
		PaymentTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		PaymentTxT.setBounds(5, 130, 90, 20);
		PaymentTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		PaymentTxT.setForeground(Color.black);
		PaymentTxT.setBorder(null);
		PaymentTxT.setOpaque(false);
		
		Payment.setText("Enter amount");
		Payment.setHorizontalAlignment(SwingConstants.RIGHT);
		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		Payment.setForeground(Color.decode("#474747"));
		Payment.setBounds(100, 133, 120, 20);
		Payment.setBackground(Color.white);
		Payment.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Payment.setOpaque(true);
		Payment.setEditable(false);
		Payment.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().isEmpty()) {
		    		Payment.setText("Enter amount");
		    		Payment.setForeground(Color.decode("#474747"));
		    		Payment.setEditable(false);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		    public void mouseReleased(java.awt.event.MouseEvent evt) {
		    	if(Payment.getText().equals("Enter amount")) {
		    		Payment.setText("");
		    		Payment.setForeground(Color.BLACK);
		    		Payment.setEditable(true);
		    		Payment.setFont(new Font("Helvetica", Font.PLAIN, 14));
		    	}
		    }
		});
		
		Payment.addKeyListener(new java.awt.event.KeyAdapter() {
		    public void keyPressed(java.awt.event.KeyEvent e) {
		    if (e.getKeyCode() == KeyEvent.VK_ENTER ) {
		    	
		     } 
		   }
		});
		
		ChangeTxT.setText("Change: ");
		ChangeTxT.setHorizontalAlignment(SwingConstants.RIGHT);
		ChangeTxT.setBounds(5, 160, 90, 20);
		ChangeTxT.setFont(new Font("Helvetica", Font.BOLD, 14));
		ChangeTxT.setForeground(Color.black);
		ChangeTxT.setBorder(null);
		ChangeTxT.setOpaque(false);
		
		Change.setHorizontalAlignment(SwingConstants.RIGHT);
		Change.setFont(new Font("Arial", Font.PLAIN, 14));
		Change.setForeground(Color.black);
		Change.setBounds(100, 163, 120, 20);
		Change.setBackground(Color.white);
		Change.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		Change.setOpaque(true);
		Change.setEditable(false);
		
		//CONFIRM
		DownBar.setBounds(0, 495, 500, 100);
		DownBar.setBackground(Color.decode("#4b3a2f"));
		DownBar.setBorder(null);
		DownBar.setOpaque(true);
		DownBar.setVisible(false);
		
		Cancel.setText("Cancel");
		Cancel.setBounds(85, 15, 140, 35);
		Cancel.setFont(new Font("Helvetica", Font.BOLD, 16));
		Cancel.setForeground(Color.black);
		Cancel.setBackground(Color.decode("#f5b8b8"));
		Cancel.setOpaque(true);
		Cancel.setBorder(null);
		Cancel.setFocusable(false);
		Cancel.addActionListener(this);
		Cancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f72525"));
		    	Cancel.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Cancel.setBackground(Color.decode("#f5b8b8"));
		    	Cancel.setForeground(Color.black);
		    }
		});
		
		Confirm.setText("Confirm");
		Confirm.setBounds(280, 15, 140, 35);
		Confirm.setFont(new Font("Helvetica", Font.BOLD, 16));
		Confirm.setForeground(Color.black);
		Confirm.setBackground(Color.decode("#bbf5b8"));
		Confirm.setOpaque(true);
		Confirm.setBorder(null);
		Confirm.setFocusable(false);
		Confirm.addActionListener(this);
		Confirm.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Confirm.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#02bf34"));
		    	Confirm.setForeground(Color.white);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	Confirm.setBackground(Color.decode("#bbf5b8"));
		    	Confirm.setForeground(Color.black);
		    }
		});
		
		//ADD
		add(Title);
		add(Order);
		add(Info);
		add(SelectedUp);
		SelectedUp.add(ItemSelect);
		SelectedUp.add(Price);
		
		add(SelectedDown);
		SelectedDown.add(TotalTxT);
		SelectedDown.add(DiscountTxT);
		SelectedDown.add(DiscountedTxT);
		SelectedDown.add(PaymentTxT);
		SelectedDown.add(ChangeTxT);
		SelectedDown.add(Total);
		SelectedDown.add(Discount);
		SelectedDown.add(Payment);
		SelectedDown.add(Change);
		SelectedDown.add(None);
		SelectedDown.add(Senior);
		SelectedDown.add(Student);
		
		add(DownBar);
		DownBar.add(Confirm);
		DownBar.add(Cancel);
		
		add(BFPanel);
		add(MainPanel);
		add(DPanel);
		add(BuyPanel);
		
		getContentPane().setComponentZOrder(Title, 0);
		getContentPane().setComponentZOrder(BFPanel, 0);
		getContentPane().setComponentZOrder(MainPanel, 0);
		getContentPane().setComponentZOrder(DPanel, 0);
		getContentPane().setComponentZOrder(BuyPanel, 0);
		getContentPane().setComponentZOrder(Order, 0);
		getContentPane().setComponentZOrder(Info, 0);
		getContentPane().setComponentZOrder(SelectedDown, 0);
		getContentPane().setComponentZOrder(SelectedUp, 0);
		getContentPane().setComponentZOrder(DownBar, 0);
		for (int i = 0; i < SideButt.length; i++) {
		    getContentPane().setComponentZOrder(SideButt[i], 0);
		}
		setLayout(null);
		setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		for(int i = 0; i < BFDish.length;i++ ) {
    		if(e.getSource().equals(BFDish[i])) {
    			if(BFDish[i].isSelected()) {
        			ListModel.addElement(BFShow[i]);
    			} else {
    				ListModel.removeElement(BFShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < MDish.length;i++ ) {
    		if(e.getSource().equals(MDish[i])) {
    			if(MDish[i].isSelected()) {
        			ListModel.addElement(MShow[i]);
    			} else {
    				ListModel.removeElement(MShow[i]);
    			}
    		}
		}
		
		for(int i = 0; i < DDish.length;i++ ) {
    		if(e.getSource().equals(DDish[i])) {
    			if(DDish[i].isSelected()) {
        			ListModel.addElement(DShow[i]);
    			} else {
    				ListModel.removeElement(DShow[i]);
    			}
    		}
		}
		
		if (e.getSource() == BackButt) {
		    int Back = JOptionPane.showConfirmDialog(this, "Go back and discard order?", "Back", JOptionPane.YES_NO_OPTION);
		    if (Back == JOptionPane.YES_OPTION) {
		        FOS_Dine_Take Fos = new FOS_Dine_Take();
		        Fos.FOS_Dine_Take_Design();
		        dispose();
		    }
		}
		
		//PROCESS
		
	    if (e.getSource() == BFButt) {
	   
	        Title.setText("Breakfast");
	        BFButt.setBackground(Color.decode("#695142"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(true);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == MainButt) {
	    	
	        Title.setText("Main Course");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#695142"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(140, 85, 280, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(true);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedDown.setVisible(false);
	        SelectedUp.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == DessertButt) {
	    	
	        Title.setText("Desserts");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#695142"));
	        BuyButt.setBackground(Color.decode("#4b3a2f"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(true);
	        BuyPanel.setVisible(false);
	        Order.setVisible(false);
	        Info.setVisible(false);
	        SelectedUp.setVisible(false);
	        SelectedDown.setVisible(false);
	        DownBar.setVisible(false);
	        
	    } else if (e.getSource() == BuyButt) {
	    	
	        Title.setText("Checkout");
	        BFButt.setBackground(Color.decode("#4b3a2f"));
    		MainButt.setBackground(Color.decode("#4b3a2f"));
    		DessertButt.setBackground(Color.decode("#4b3a2f"));
	        BuyButt.setBackground(Color.decode("#695142"));
	        
	        Title.setBounds(175, 85, 250, 40);
	        BFPanel.setVisible(false);
	        MainPanel.setVisible(false);
	        DPanel.setVisible(false);
	        BuyPanel.setVisible(true);
	        Order.setVisible(true);
	        Info.setVisible(true);
	        SelectedUp.setVisible(true);
	        SelectedDown.setVisible(true);
	        DownBar.setVisible(true);
	        
	        //PROCESS
	        
	      //------------------------------------------------------------------
	        
	        int size = ListModel.getSize();
	        
	        if (size == 0) {
	        	Total.setText("P 0.00");
	        } else {
	        	for (int i = 0; i < size; i++) {
	  			  String element = ListModel.getElementAt(i);
	  			  
	  					//ARRAY CHECKER AND INDEX GETTER
	  		             int BFIndex = -1, MIndex = -1, DIndex = -1;
	  		
	  		             for (int x = 0; x < BFShow.length; x++) {
	  		               if (BFShow[x].equals(element)) {
	  		             	  BFIndex = x;
	  		                 break;
	  		               } else if (MShow[x].equals(element)) {
	  		             	  MIndex = x;
	  		                   break;
	  		                 } else if (DShow[x].equals(element)) {
	  		             	  DIndex = x;
	  		                   break;
	  		                 }
	  		             }
	               
	  		           //PRICE SETTER
	  		             if (BFIndex != -1) {
	  		            	 	BFnum += BFCalc[BFIndex];
	  		             	}  else if (MIndex != -1) {
	  		             		Mnum += MCalc[MIndex];
	  		               	} else if (DIndex != -1) {
	  		               		Dnum += DCalc[DIndex];
	  		               	} 
	  		             
	  		             TotalPrice = BFnum + Mnum + Dnum;
	  		             Total.setText("P " + String.format("%.2f", TotalPrice));
	  			}
	        }
	      //------------------------------------------------------------------
	    } else if (e.getSource() == HelpButt) {
	    	JOptionPane.showMessageDialog(null, "<html>To select the item(s) you want to order, simply <u>tap or click</u> on the area near the food you have chosen.<br> Once selected, a check mark will appear next to the item to indicate that it has been chosen.</html>", "How to use!", JOptionPane.INFORMATION_MESSAGE);	    	
	    }
	    
	  //------------------------------------------------------------------
	    if (e.getSource() == None || e.getSource() == Student || e.getSource() == Senior) {
			if(None.isSelected() == true) {
				Discount.setText("P 0.00");
			} else if(Student.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.03;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			} else if(Senior.isSelected() == true) {
				DiscountPrice = TotalPrice * 0.2;
				Discount.setText("P " + String.format("%.2f",DiscountPrice));
			}
		}
	  //------------------------------------------------------------------
	    
	    (TotalPrice - DiscountPrice)
	    Change.setText("99");
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-21 19:01:18.413
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-21 19:01:18.414
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-04-22 08:04:25.705 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-22 08:05:21.816
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 08:05:21.816
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 08:05:21.816
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 08:05:37.479
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-22 08:12:30.424 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-22 08:13:04.756
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 08:13:04.756
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 08:13:04.756
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 08:13:21.014
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-04-22 08:46:21.374
!MESSAGE Could not retrieve declared fields
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:237)
	at org.eclipse.jdt.internal.core.ClassFile.getJarBinaryTypeInfo(ClassFile.java:240)
	at org.eclipse.jdt.internal.core.ClassFile.existsUsingJarTypeCache(ClassFile.java:162)
	at org.eclipse.jdt.internal.core.NameLookup.seekTypesInBinaryPackage(NameLookup.java:1482)
	at org.eclipse.jdt.internal.core.NameLookup.seekTypes(NameLookup.java:1450)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:996)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:176)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:515)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$0(LookupEnvironment.java:237)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:381)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:236)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:114)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:249)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveTypeFor(BinaryTypeBinding.java:1889)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.availableFields(BinaryTypeBinding.java:373)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredFields(TypeBinding.java:249)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:214)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:206)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:243)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:206)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:243)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:206)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:243)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addInherited(ScopeAnalyzer.java:206)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.addTypeDeclarations(ScopeAnalyzer.java:278)
	at org.eclipse.jdt.internal.corext.dom.ScopeAnalyzer.getDeclarationsInScope(ScopeAnalyzer.java:399)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.addSimilarVariableProposals(UnresolvedElementsSubProcessor.java:448)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getVariableProposals(UnresolvedElementsSubProcessor.java:315)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:405)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:360)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2023-04-22 09:46:26.544 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-22 09:46:54.510
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 09:46:54.510
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 09:46:54.510
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 09:47:07.187
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-22 09:48:46.108 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-22 09:48:56.701
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 09:48:56.701
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 09:48:56.701
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 09:49:05.409
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-22 09:54:37.287 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-22 09:54:47.225
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 09:54:47.225
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 09:54:47.225
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 09:54:57.777
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-22 10:14:31.999 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-22 10:14:42.477
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 10:14:42.477
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 10:14:42.477
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 10:14:52.741
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-08-19 00:36:08.377 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data C:\Users\HP\Desktop\Year 1\Roque_Raniel_Christian_B-Act4- Food-Ordering-System -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 4 567 2023-08-19 00:36:11.939
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2023-08-19 00:36:11.939
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2023-08-19 00:36:11.939
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jface 2 0 2023-08-19 00:36:15.837
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-08-19 00:36:15.837
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-08-19 00:36:15.837
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-08-19 00:36:22.089
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-08-19 00:37:51.390 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-08-19 00:37:58.734
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-08-19 00:37:58.734
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-08-19 00:37:58.734
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-08-19 00:38:04.188
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\HP'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
